// Created on: 1993-06-03
// Created by: Laurent BUCHARD
// Copyright (c) 1993-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include ThePolygon_hxx

//=================================================================
inline const TheBoundingBox& IntCurveSurface_PolygonTool::Bounding(const ThePolygon& thePolygon)
{
  return thePolygon.Bounding();
}

//=================================================================
inline Standard_Real IntCurveSurface_PolygonTool::DeflectionOverEstimation(
  const ThePolygon& thePolygon)
{
  return thePolygon.DeflectionOverEstimation();
}

//=================================================================
inline Standard_Boolean IntCurveSurface_PolygonTool::Closed(const ThePolygon& thePolygon)
{
  return thePolygon.Closed();
}

//=================================================================
inline Standard_Integer IntCurveSurface_PolygonTool::NbSegments(const ThePolygon& thePolygon)
{
  return thePolygon.NbSegments();
}

//=================================================================
inline const ThePoint& IntCurveSurface_PolygonTool::BeginOfSeg(const ThePolygon&      thePolygon,
                                                               const Standard_Integer Index)
{
  return thePolygon.BeginOfSeg(Index);
}

//=================================================================
inline const ThePoint& IntCurveSurface_PolygonTool::EndOfSeg(const ThePolygon&      thePolygon,
                                                             const Standard_Integer Index)
{
  return thePolygon.EndOfSeg(Index);
}

//=================================================================
