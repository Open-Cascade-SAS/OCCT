// Created on: 1992-08-18
// Created by: Herve LEGRAND
// Copyright (c) 1992-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <Standard_NotImplemented.hxx>
#include <HLRBRep_Curve.hxx>
#include <GeomAbs_Shape.hxx>

//=======================================================================
// function : Value
// purpose  :
//=======================================================================

inline void HLRBRep_CLPropsATool::Value(const HLRBRep_Curve* A, const Standard_Real U, gp_Pnt2d& P)
{
  P = A->Value(U);
}

//=======================================================================
// function : D1
// purpose  :
//=======================================================================

inline void HLRBRep_CLPropsATool::D1(const HLRBRep_Curve* A,
                                     const Standard_Real  U,
                                     gp_Pnt2d&            P,
                                     gp_Vec2d&            V1)
{
  A->D1(U, P, V1);
}

//=======================================================================
// function : D2
// purpose  :
//=======================================================================

inline void HLRBRep_CLPropsATool::D2(const HLRBRep_Curve* A,
                                     const Standard_Real  U,
                                     gp_Pnt2d&            P,
                                     gp_Vec2d&            V1,
                                     gp_Vec2d&            V2)
{
  A->D2(U, P, V1, V2);
}

//=======================================================================
// function : D3
// purpose  :
//=======================================================================

inline void HLRBRep_CLPropsATool::D3(const HLRBRep_Curve* A,
                                     const Standard_Real  U,
                                     gp_Pnt2d&            P,
                                     gp_Vec2d&            V1,
                                     gp_Vec2d&            V2,
                                     gp_Vec2d&            V3)
{
  A->D3(U, P, V1, V2, V3);
}

//=======================================================================
// function : Continuity
// purpose  :
//=======================================================================

inline Standard_Integer HLRBRep_CLPropsATool::Continuity(const HLRBRep_Curve*)
{
  return GeomAbs_C2;
}

//=======================================================================
// function : FirstParameter
// purpose  :
//=======================================================================

inline Standard_Real HLRBRep_CLPropsATool::FirstParameter(const HLRBRep_Curve* A)
{
  return A->FirstParameter();
}

//=======================================================================
// function : LastParameter
// purpose  :
//=======================================================================

inline Standard_Real HLRBRep_CLPropsATool::LastParameter(const HLRBRep_Curve* A)
{
  return A->LastParameter();
}
