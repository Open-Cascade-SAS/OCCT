// Copyright (c) 1995-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <StdFail_NotDone.hxx>
#include <StdFail_UndefinedDerivative.hxx>
#include <Standard_DomainError.hxx>

inline Standard_Boolean IntImp_Int2S::IsDone() const
{
  return done;
}

inline Standard_Boolean IntImp_Int2S::IsEmpty() const
{
  if (!done)
    throw StdFail_NotDone(" IntImp_Int2S::IsEmpty() ");
  return empty;
}

inline const IntSurf_PntOn2S& IntImp_Int2S::Point() const
{
  if (!done)
    throw StdFail_NotDone(" IntImp_Int2S::Point() ");
  if (empty)
    throw Standard_DomainError(" IntImp_Int2S::Point() ");
  return pint;
}

inline Standard_Boolean IntImp_Int2S::IsTangent() const
{

  if (!done)
    throw StdFail_NotDone(" IntImp_Int2S::IsTangent () ");
  if (empty)
    throw Standard_DomainError(" IntImp_Int2S::IsTangent () ");
  return tangent;
}

inline const gp_Dir& IntImp_Int2S::Direction() const
{

  if (!done)
    throw StdFail_NotDone(" IntImp_Int2S::Direction () ");
  if (empty)
    throw Standard_DomainError(" IntImp_Int2S::Direction () ");
  if (tangent)
    throw StdFail_UndefinedDerivative(" IntImp_Int2S::Direction () ");
  return d3d;
}

inline const gp_Dir2d& IntImp_Int2S::DirectionOnS1() const
{

  if (!done)
    throw StdFail_NotDone(" IntImp_Int2S::DirectionOnS1 () ");
  if (empty)
    throw Standard_DomainError(" IntImp_Int2S::DirectionOnS1 () ");
  if (tangent)
    throw StdFail_UndefinedDerivative(" IntImp_Int2S::DirectionOnS1 () ");
  return d2d1;
}

inline const gp_Dir2d& IntImp_Int2S::DirectionOnS2() const
{

  if (!done)
    throw StdFail_NotDone(" IntImp_Int2S::DirectionOnS2 () ");
  if (empty)
    throw Standard_DomainError(" IntImp_Int2S::DirectionOnS2 () ");
  if (tangent)
    throw StdFail_UndefinedDerivative(" IntImp_Int2S::DirectionOnS2 () ");
  return d2d2;
}

inline IntImp_TheFunction& IntImp_Int2S::Function()
{
  return myZerParFunc;
}

inline IntSurf_PntOn2S& IntImp_Int2S::ChangePoint()
{
  return pint;
}