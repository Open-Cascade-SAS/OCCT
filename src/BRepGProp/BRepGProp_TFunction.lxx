// Created on: 2005-12-21
// Created by: Sergey KHROMOV
// Copyright (c) 2005-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

//=======================================================================
// function : SetNbKronrodPoints
// purpose  :
//=======================================================================

inline void BRepGProp_TFunction::SetNbKronrodPoints(const Standard_Integer theNbPoints)
{
  myNbPntOuter = (theNbPoints % 2 == 0) ? theNbPoints + 1 : theNbPoints;
}

//=======================================================================
// function : SetValueType
// purpose  :
//=======================================================================

inline void BRepGProp_TFunction::SetValueType(const GProp_ValueType theType)
{
  myValueType = theType;
  myUFunction.SetValueType(myValueType);
}

//=======================================================================
// function : SetTolerance
// purpose  :
//=======================================================================

inline void BRepGProp_TFunction::SetTolerance(const Standard_Real theTolerance)
{
  myTolerance = theTolerance;
}

//=======================================================================
// function : TolReached
// purpose  :
//=======================================================================

inline Standard_Real BRepGProp_TFunction::ErrorReached() const
{
  return myErrReached;
}

//=======================================================================
// function : ErrorReached
// purpose  :
//=======================================================================

inline Standard_Real BRepGProp_TFunction::AbsolutError() const
{
  return myAbsError;
}
