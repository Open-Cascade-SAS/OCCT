// Created on: 1997-06-26
// Created by: Philippe MANGIN
// Copyright (c) 1997-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <StdFail_NotDone.hxx>
#include <TColStd_HArray1OfInteger.hxx>
#include <TColStd_HArray1OfReal.hxx>
#include <TColStd_HArray2OfReal.hxx>
#include <TColgp_HArray1OfPnt2d.hxx>
#include <TColgp_HArray2OfPnt.hxx>

inline Standard_Boolean Approx_SweepApproximation::IsDone() const
{
  return done;
}

inline Standard_Integer Approx_SweepApproximation::UDegree() const
{
  if (!done)
  {
    throw StdFail_NotDone(" Approx_SweepApproximation");
  }
  return udeg;
}

inline Standard_Integer Approx_SweepApproximation::VDegree() const
{
  if (!done)
  {
    throw StdFail_NotDone(" Approx_SweepApproximation");
  }
  return vdeg;
}

inline const TColgp_Array2OfPnt& Approx_SweepApproximation::SurfPoles() const
{
  if (!done)
  {
    throw StdFail_NotDone(" Approx_SweepApproximation");
  }
  return tabPoles->Array2();
}

inline const TColStd_Array2OfReal& Approx_SweepApproximation::SurfWeights() const
{
  if (!done)
  {
    throw StdFail_NotDone(" Approx_SweepApproximation");
  }
  return tabWeights->Array2();
}

inline const TColStd_Array1OfReal& Approx_SweepApproximation::SurfUKnots() const
{
  if (!done)
  {
    throw StdFail_NotDone(" Approx_SweepApproximation");
  }
  return tabUKnots->Array1();
}

inline const TColStd_Array1OfReal& Approx_SweepApproximation::SurfVKnots() const
{
  if (!done)
  {
    throw StdFail_NotDone(" Approx_SweepApproximation");
  }
  return tabVKnots->Array1();
}

inline const TColStd_Array1OfInteger& Approx_SweepApproximation::SurfUMults() const
{
  if (!done)
  {
    throw StdFail_NotDone(" Approx_SweepApproximation");
  }
  return tabUMults->Array1();
}

inline const TColStd_Array1OfInteger& Approx_SweepApproximation::SurfVMults() const
{
  if (!done)
  {
    throw StdFail_NotDone(" Approx_SweepApproximation");
  }
  return tabVMults->Array1();
}

inline Standard_Integer Approx_SweepApproximation::NbCurves2d() const
{
  if (!done)
  {
    throw StdFail_NotDone(" Approx_SweepApproximation");
  }
  return Num2DSS;
}

inline Standard_Integer Approx_SweepApproximation::Curves2dDegree() const
{
  if (!done)
  {
    throw StdFail_NotDone(" Approx_SweepApproximation");
  }
  if (seqPoles2d.Length() == 0)
  {
    throw Standard_DomainError();
  }
  return deg2d;
}

inline const TColgp_Array1OfPnt2d& Approx_SweepApproximation::Curve2dPoles(
  const Standard_Integer Index) const
{
  if (!done)
  {
    throw StdFail_NotDone(" Approx_SweepApproximation");
  }
  if (seqPoles2d.Length() == 0)
  {
    throw Standard_DomainError();
  }
  return seqPoles2d(Index)->Array1();
}

inline const TColStd_Array1OfReal& Approx_SweepApproximation::Curves2dKnots() const
{
  if (!done)
  {
    throw StdFail_NotDone(" Approx_SweepApproximation");
  }
  if (seqPoles2d.Length() == 0)
  {
    throw Standard_DomainError();
  }
  return tab2dKnots->Array1();
}

inline const TColStd_Array1OfInteger& Approx_SweepApproximation::Curves2dMults() const
{
  if (!done)
  {
    throw StdFail_NotDone(" Approx_SweepApproximation");
  }
  if (seqPoles2d.Length() == 0)
  {
    throw Standard_DomainError();
  }
  return tab2dMults->Array1();
}

/*
inline  void Approx_SweepApproximation::TolReached(Standard_Real& Tol3d,Standard_Real& Tol2d) const
{

}*/
