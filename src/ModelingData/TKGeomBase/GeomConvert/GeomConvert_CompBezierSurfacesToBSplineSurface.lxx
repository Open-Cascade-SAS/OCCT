// Created on: 1996-06-07
// Created by: Philippe MANGIN
// Copyright (c) 1996-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <TColStd_HArray1OfReal.hxx>
#include <TColgp_HArray2OfPnt.hxx>

// ================================================================================
inline Standard_Integer GeomConvert_CompBezierSurfacesToBSplineSurface::NbUKnots() const
// ================================================================================
{
  return myUKnots->Length();
}

// ================================================================================
inline Standard_Integer GeomConvert_CompBezierSurfacesToBSplineSurface::NbUPoles() const
// ================================================================================
{
  return myPoles->ColLength();
}

// ================================================================================
inline Standard_Integer GeomConvert_CompBezierSurfacesToBSplineSurface::NbVKnots() const
// ================================================================================
{
  return myVKnots->Length();
}

// ================================================================================
inline Standard_Integer GeomConvert_CompBezierSurfacesToBSplineSurface::NbVPoles() const
// ================================================================================
{
  return myPoles->RowLength();
}

// ================================================================================
inline const Handle(TColgp_HArray2OfPnt)& GeomConvert_CompBezierSurfacesToBSplineSurface::Poles()
  const
// ================================================================================
{
  return myPoles;
}

// ================================================================================
inline const Handle(TColStd_HArray1OfReal)& GeomConvert_CompBezierSurfacesToBSplineSurface::UKnots()
  const
// ================================================================================
{
  return myUKnots;
}

// ================================================================================
inline Standard_Integer GeomConvert_CompBezierSurfacesToBSplineSurface::UDegree() const
// ================================================================================
{
  return myUDegree;
}

// ================================================================================
inline const Handle(TColStd_HArray1OfReal)& GeomConvert_CompBezierSurfacesToBSplineSurface::VKnots()
  const
// ================================================================================
{
  return myVKnots;
}

// ================================================================================
inline Standard_Integer GeomConvert_CompBezierSurfacesToBSplineSurface::VDegree() const
// ================================================================================
{
  return myVDegree;
}

// ================================================================================
inline const Handle(TColStd_HArray1OfInteger)& GeomConvert_CompBezierSurfacesToBSplineSurface::
  UMultiplicities() const
// ================================================================================
{
  return myUMults;
}

// ================================================================================
inline const Handle(TColStd_HArray1OfInteger)& GeomConvert_CompBezierSurfacesToBSplineSurface::
  VMultiplicities() const
// ================================================================================
{
  return myVMults;
}
