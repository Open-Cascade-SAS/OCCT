// Created by: Modelization
// Copyright (c) 1995-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <StdFail_NotDone.hxx>
#include <Standard_DomainError.hxx>
#include <IntPatch_Line.hxx>

inline Standard_Boolean IntPatch_Intersection::IsDone() const
{
  return done;
}

inline Standard_Boolean IntPatch_Intersection::IsEmpty() const
{
  if (!done)
  {
    throw StdFail_NotDone();
  }
  return empt;
}

inline Standard_Boolean IntPatch_Intersection::TangentFaces() const
{
  if (!done)
  {
    throw StdFail_NotDone();
  }
  return tgte;
}

inline Standard_Boolean IntPatch_Intersection::OppositeFaces() const
{
  if (!done)
  {
    throw StdFail_NotDone();
  }
  if (!tgte)
  {
    throw Standard_DomainError();
  }
  return oppo;
}

inline Standard_Integer IntPatch_Intersection::NbPnts() const
{
  if (!done)
  {
    throw StdFail_NotDone();
  }
  return spnt.Length();
}

inline const IntPatch_Point& IntPatch_Intersection::Point(const Standard_Integer Index) const
{
  if (!done)
  {
    throw StdFail_NotDone();
  }
  return spnt(Index);
}

inline Standard_Integer IntPatch_Intersection::NbLines() const
{
  if (!done)
  {
    throw StdFail_NotDone();
  }
  return slin.Length();
}

inline const Handle(IntPatch_Line)& IntPatch_Intersection::Line(const Standard_Integer Index) const
{
  if (!done)
  {
    throw StdFail_NotDone();
  }
  return slin(Index);
}
