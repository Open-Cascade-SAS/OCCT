// Created on: 1992-10-01
// Created by: Laurent BUCHARD
// Copyright (c) 1992-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

inline IntRes2d_IntersectionPoint::IntRes2d_IntersectionPoint(const gp_Pnt2d&            P,
                                                              const Standard_Real        Uc1,
                                                              const Standard_Real        Uc2,
                                                              const IntRes2d_Transition& Trans1,
                                                              const IntRes2d_Transition& Trans2,
                                                              const Standard_Boolean ReversedFlag)
    : pt(P),
      p1(Uc1),
      p2(Uc2),
      trans1(Trans1),
      trans2(Trans2)
{
  if (ReversedFlag)
  {
    trans1 = Trans2;
    trans2 = Trans1;
    p1     = Uc2;
    p2     = Uc1;
  }
}

inline void IntRes2d_IntersectionPoint::SetValues(const gp_Pnt2d&            P,
                                                  const Standard_Real        Uc1,
                                                  const Standard_Real        Uc2,
                                                  const IntRes2d_Transition& Trans1,
                                                  const IntRes2d_Transition& Trans2,
                                                  const Standard_Boolean     ReversedFlag)
{
  pt = P;
  if (!ReversedFlag)
  {
    trans1 = Trans1;
    trans2 = Trans2;
    p1     = Uc1;
    p2     = Uc2;
  }
  else
  {
    trans1 = Trans2;
    trans2 = Trans1;
    p1     = Uc2;
    p2     = Uc1;
  }
}

inline const gp_Pnt2d& IntRes2d_IntersectionPoint::Value() const
{
  return pt;
}

inline Standard_Real IntRes2d_IntersectionPoint::ParamOnFirst() const
{
  return p1;
}

inline Standard_Real IntRes2d_IntersectionPoint::ParamOnSecond() const
{
  return p2;
}

inline const IntRes2d_Transition& IntRes2d_IntersectionPoint::TransitionOfFirst() const
{
  return trans1;
}

inline const IntRes2d_Transition& IntRes2d_IntersectionPoint::TransitionOfSecond() const
{
  return trans2;
}
