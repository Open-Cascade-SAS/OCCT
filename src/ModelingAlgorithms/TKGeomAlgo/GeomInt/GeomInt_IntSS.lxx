// Created on: 1995-01-27
// Created by: Jacques GOUSSARD
// Copyright (c) 1995-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <IntPatch_Point.hxx>
#include <Geom_Surface.hxx>

//=======================================================================
// function : GeomInt_IntSS
// purpose  :
//=======================================================================
inline GeomInt_IntSS::GeomInt_IntSS()
    : myNbrestr(0),
      myTolReached2d(0.0),
      myTolReached3d(0.0),
      myTolCheck(1.e-7),
      myTolAngCheck(1.e-6)
{
}

//=======================================================================
// function : GeomInt_IntSS
// purpose  :
//=======================================================================
inline GeomInt_IntSS::GeomInt_IntSS(const Handle(Geom_Surface)& S1,
                                    const Handle(Geom_Surface)& S2,
                                    const Standard_Real         Tol,
                                    const Standard_Boolean      Approx,
                                    const Standard_Boolean      ApproxS1,
                                    const Standard_Boolean      ApproxS2)
    : myNbrestr(0),
      myTolReached2d(0.0),
      myTolReached3d(0.0),
      myTolCheck(1.e-7),
      myTolAngCheck(1.e-6)
{
  Perform(S1, S2, Tol, Approx, ApproxS1, ApproxS2);
}

//=======================================================================
// function : Perform
// purpose  : Intersection of Adapted surfaces
//=======================================================================
inline void GeomInt_IntSS::Perform(const Handle(GeomAdaptor_Surface)& HS1,
                                   const Handle(GeomAdaptor_Surface)& HS2,
                                   const Standard_Real                Tol,
                                   const Standard_Boolean             Approx,
                                   const Standard_Boolean             ApproxS1,
                                   const Standard_Boolean             ApproxS2)
{
  myHS1 = HS1;
  myHS2 = HS2;
  InternalPerform(Tol, Approx, ApproxS1, ApproxS2, Standard_False, 0., 0., 0., 0.);
}

//=======================================================================
// function : Perform
// purpose  : Intersection of Adapted surfaces with a Starting Point
//=======================================================================
inline void GeomInt_IntSS::Perform(const Handle(GeomAdaptor_Surface)& HS1,
                                   const Handle(GeomAdaptor_Surface)& HS2,
                                   const Standard_Real                Tol,
                                   const Standard_Real                U1,
                                   const Standard_Real                V1,
                                   const Standard_Real                U2,
                                   const Standard_Real                V2,
                                   const Standard_Boolean             Approx,
                                   const Standard_Boolean             ApproxS1,
                                   const Standard_Boolean             ApproxS2)
{
  myHS1 = HS1;
  myHS2 = HS2;
  InternalPerform(Tol, Approx, ApproxS1, ApproxS2, Standard_True, U1, V1, U2, V2);
}

//=======================================================================
// function : IsDone
// purpose  :
//=======================================================================
inline Standard_Boolean GeomInt_IntSS::IsDone() const
{
  return myIntersector.IsDone();
}

//=======================================================================
// function : TolReached2d
// purpose  :
//=======================================================================
inline Standard_Real GeomInt_IntSS::TolReached2d() const
{
  return myTolReached2d;
}

//=======================================================================
// function : TolReached3d
// purpose  :
//=======================================================================
inline Standard_Real GeomInt_IntSS::TolReached3d() const
{
  return myTolReached3d;
}

//=======================================================================
// function : NbLines
// purpose  :
//=======================================================================
inline Standard_Integer GeomInt_IntSS::NbLines() const
{
  return sline.Length() - myNbrestr;
}

//=======================================================================
// function : NbBoundaries
// purpose  :
//=======================================================================
inline Standard_Integer GeomInt_IntSS::NbBoundaries() const
{
  StdFail_NotDone_Raise_if(!myIntersector.IsDone(), "GeomInt_IntSS::NbBoundaries() - no result");
  return myNbrestr;
}

//=======================================================================
// function : NbPoints
// purpose  :
//=======================================================================
inline Standard_Integer GeomInt_IntSS::NbPoints() const
{
  return myIntersector.NbPnts();
}

//=======================================================================
// function : Point
// purpose  :
//=======================================================================
inline gp_Pnt GeomInt_IntSS::Point(const Standard_Integer Index) const
{
  return myIntersector.Point(Index).Value();
}
