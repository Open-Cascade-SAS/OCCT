// Created on: 1992-07-09
// Created by: Christophe MARION
// Copyright (c) 1992-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <Standard_NoSuchObject.hxx>
#include <gp_Vec.hxx>
#include <gp_Pnt.hxx>

//=======================================================================
// function : Directions
// purpose  :
//=======================================================================

inline void HLRAlgo_Projector::Directions(gp_Vec2d& D1, gp_Vec2d& D2, gp_Vec2d& D3) const
{
  D1 = myD1;
  D2 = myD2;
  D3 = myD3;
}

//=======================================================================
// function : Perspective
// purpose  :
//=======================================================================

inline Standard_Boolean HLRAlgo_Projector::Perspective() const
{
  return myPersp;
}

/*
//=======================================================================
//function : Transformation
//purpose  :
//=======================================================================

inline const gp_Trsf & HLRAlgo_Projector::Transformation() const
{ return myTrsf; }
*/
//=======================================================================
// function : InvertedTransformation
// purpose  :
//=======================================================================

inline const gp_Trsf& HLRAlgo_Projector::InvertedTransformation() const
{
  return myInvTrsf;
}

//=======================================================================
// function : FullTransformation
// purpose  :
//=======================================================================

inline const gp_Trsf& HLRAlgo_Projector::FullTransformation() const
{
  return myScaledTrsf;
}

//=======================================================================
// function : Focus
// purpose  :
//=======================================================================

inline Standard_Real HLRAlgo_Projector::Focus() const
{
  Standard_NoSuchObject_Raise_if(!myPersp, "HLRAlgo_Projector::Not a Perspective");
  return myFocus;
}

//=======================================================================
// function : Transform
// purpose  :
//=======================================================================

inline void HLRAlgo_Projector::Transform(gp_Vec& D) const
{
  D.Transform(myTrsf);
}

//=======================================================================
// function : Transform
// purpose  :
//=======================================================================

inline void HLRAlgo_Projector::Transform(gp_Pnt& Pnt) const
{
  Pnt.Transform(myTrsf);
}
