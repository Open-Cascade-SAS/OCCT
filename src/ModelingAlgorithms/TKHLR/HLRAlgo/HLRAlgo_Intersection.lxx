// Created on: 1992-02-19
// Created by: Christophe MARION
// Copyright (c) 1992-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

//=======================================================================
// function : Orientation
// purpose  :
//=======================================================================

inline void HLRAlgo_Intersection::Orientation(const TopAbs_Orientation Ori)
{
  myOrien = Ori;
}

//=======================================================================
// function : Orientation
// purpose  :
//=======================================================================

inline TopAbs_Orientation HLRAlgo_Intersection::Orientation() const
{
  return myOrien;
}

//=======================================================================
// function : Level
// purpose  :
//=======================================================================

inline void HLRAlgo_Intersection::Level(const Standard_Integer Lev)
{
  myLevel = Lev;
}

//=======================================================================
// function : Level
// purpose  :
//=======================================================================

inline Standard_Integer HLRAlgo_Intersection::Level() const
{
  return myLevel;
}

//=======================================================================
// function : SegIndex
// purpose  :
//=======================================================================

inline void HLRAlgo_Intersection::SegIndex(const Standard_Integer SegInd)
{
  mySegIndex = SegInd;
}

//=======================================================================
// function : SegIndex
// purpose  :
//=======================================================================

inline Standard_Integer HLRAlgo_Intersection::SegIndex() const
{
  return mySegIndex;
}

//=======================================================================
// function : Index
// purpose  :
//=======================================================================

inline void HLRAlgo_Intersection::Index(const Standard_Integer Ind)
{
  myIndex = Ind;
}

//=======================================================================
// function : Index
// purpose  :
//=======================================================================

inline Standard_Integer HLRAlgo_Intersection::Index() const
{
  return myIndex;
}

//=======================================================================
// function : Parameter
// purpose  :
//=======================================================================

inline void HLRAlgo_Intersection::Parameter(const Standard_Real P)
{
  myParam = P;
}

//=======================================================================
// function : Parameter
// purpose  :
//=======================================================================

inline Standard_Real HLRAlgo_Intersection::Parameter() const
{
  return myParam;
}

//=======================================================================
// function : Tolerance
// purpose  :
//=======================================================================

inline void HLRAlgo_Intersection::Tolerance(const Standard_ShortReal T)
{
  myToler = T;
}

//=======================================================================
// function : Tolerance
// purpose  :
//=======================================================================

inline Standard_ShortReal HLRAlgo_Intersection::Tolerance() const
{
  return myToler;
}

//=======================================================================
// function : State
// purpose  :
//=======================================================================

inline void HLRAlgo_Intersection::State(const TopAbs_State St)
{
  myState = St;
}

//=======================================================================
// function : State
// purpose  :
//=======================================================================

inline TopAbs_State HLRAlgo_Intersection::State() const
{
  return myState;
}
