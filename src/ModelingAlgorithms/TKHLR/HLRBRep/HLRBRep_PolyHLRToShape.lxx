// Created on: 1993-11-02
// Created by: Christophe MARION
// Copyright (c) 1993-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <TopoDS_Shape.hxx>

//=======================================================================
// function : Show
// purpose  :
//=======================================================================

inline void HLRBRep_PolyHLRToShape::Show()
{
  myHideMode = Standard_False;
}

//=======================================================================
// function : Hide
// purpose  :
//=======================================================================

inline void HLRBRep_PolyHLRToShape::Hide()
{
  myHideMode = Standard_True;
}

//=======================================================================
// function : VCompound
// purpose  :
//=======================================================================

inline TopoDS_Shape HLRBRep_PolyHLRToShape::VCompound()
{
  return InternalCompound(4, Standard_True, TopoDS_Shape());
}

//=======================================================================
// function : VCompound
// purpose  :
//=======================================================================

inline TopoDS_Shape HLRBRep_PolyHLRToShape::VCompound(const TopoDS_Shape& S)
{
  return InternalCompound(4, Standard_True, S);
}

//=======================================================================
// function : Rg1LineVCompound
// purpose  :
//=======================================================================

inline TopoDS_Shape HLRBRep_PolyHLRToShape::Rg1LineVCompound()
{
  return InternalCompound(2, Standard_True, TopoDS_Shape());
}

//=======================================================================
// function : Rg1LineVCompound
// purpose  :
//=======================================================================

inline TopoDS_Shape HLRBRep_PolyHLRToShape::Rg1LineVCompound(const TopoDS_Shape& S)
{
  return InternalCompound(2, Standard_True, S);
}

//=======================================================================
// function : RgNLineVCompound
// purpose  :
//=======================================================================

inline TopoDS_Shape HLRBRep_PolyHLRToShape::RgNLineVCompound()
{
  return InternalCompound(3, Standard_True, TopoDS_Shape());
}

//=======================================================================
// function : RgNLineVCompound
// purpose  :
//=======================================================================

inline TopoDS_Shape HLRBRep_PolyHLRToShape::RgNLineVCompound(const TopoDS_Shape& S)
{
  return InternalCompound(3, Standard_True, S);
}

//=======================================================================
// function : OutLineVCompound
// purpose  :
//=======================================================================

inline TopoDS_Shape HLRBRep_PolyHLRToShape::OutLineVCompound()
{
  return InternalCompound(1, Standard_True, TopoDS_Shape());
}

//=======================================================================
// function : OutLineVCompound
// purpose  :
//=======================================================================

inline TopoDS_Shape HLRBRep_PolyHLRToShape::OutLineVCompound(const TopoDS_Shape& S)
{
  return InternalCompound(1, Standard_True, S);
}

//=======================================================================
// function : HCompound
// purpose  :
//=======================================================================

inline TopoDS_Shape HLRBRep_PolyHLRToShape::HCompound()
{
  return InternalCompound(4, Standard_False, TopoDS_Shape());
}

//=======================================================================
// function : HCompound
// purpose  :
//=======================================================================

inline TopoDS_Shape HLRBRep_PolyHLRToShape::HCompound(const TopoDS_Shape& S)
{
  return InternalCompound(4, Standard_False, S);
}

//=======================================================================
// function : Rg1LineHCompound
// purpose  :
//=======================================================================

inline TopoDS_Shape HLRBRep_PolyHLRToShape::Rg1LineHCompound()
{
  return InternalCompound(2, Standard_False, TopoDS_Shape());
}

//=======================================================================
// function : Rg1LineHCompound
// purpose  :
//=======================================================================

inline TopoDS_Shape HLRBRep_PolyHLRToShape::Rg1LineHCompound(const TopoDS_Shape& S)
{
  return InternalCompound(2, Standard_False, S);
}

//=======================================================================
// function : RgNLineHCompound
// purpose  :
//=======================================================================

inline TopoDS_Shape HLRBRep_PolyHLRToShape::RgNLineHCompound()
{
  return InternalCompound(3, Standard_False, TopoDS_Shape());
}

//=======================================================================
// function : RgNLineHCompound
// purpose  :
//=======================================================================

inline TopoDS_Shape HLRBRep_PolyHLRToShape::RgNLineHCompound(const TopoDS_Shape& S)
{
  return InternalCompound(3, Standard_False, S);
}

//=======================================================================
// function : OutLineHCompound
// purpose  :
//=======================================================================

inline TopoDS_Shape HLRBRep_PolyHLRToShape::OutLineHCompound()
{
  return InternalCompound(1, Standard_False, TopoDS_Shape());
}

//=======================================================================
// function : OutLineHCompound
// purpose  :
//=======================================================================

inline TopoDS_Shape HLRBRep_PolyHLRToShape::OutLineHCompound(const TopoDS_Shape& S)
{
  return InternalCompound(1, Standard_False, S);
}
