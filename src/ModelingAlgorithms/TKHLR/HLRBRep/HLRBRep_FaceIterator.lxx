// Created on: 1997-04-17
// Created by: Christophe MARION
// Copyright (c) 1997-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <HLRAlgo_WiresBlock.hxx>
#include <HLRAlgo_EdgesBlock.hxx>

//=======================================================================
// function : MoreEdge
// purpose  :
//=======================================================================

inline Standard_Boolean HLRBRep_FaceIterator::MoreEdge() const
{
  return iWire <= nbWires;
}

//=======================================================================
// function : BeginningOfWire
// purpose  :
//=======================================================================

inline Standard_Boolean HLRBRep_FaceIterator::BeginningOfWire() const
{
  return iEdge == 1;
}

//=======================================================================
// function : EndOfWire
// purpose  :
//=======================================================================

inline Standard_Boolean HLRBRep_FaceIterator::EndOfWire() const
{
  return iEdge == nbEdges;
}

//=======================================================================
// function : SkipWire
// purpose  :
//=======================================================================

inline void HLRBRep_FaceIterator::SkipWire()
{
  iEdge = nbEdges;
  NextEdge();
}

//=======================================================================
// function : Wire
// purpose  :
//=======================================================================

inline Handle(HLRAlgo_EdgesBlock) HLRBRep_FaceIterator::Wire() const
{
  return myWires->Wire(iWire);
}

//=======================================================================
// function : Edge
// purpose  :
//=======================================================================

inline Standard_Integer HLRBRep_FaceIterator::Edge() const
{
  return myEdges->Edge(iEdge);
}

//=======================================================================
// function : Orientation
// purpose  :
//=======================================================================

inline TopAbs_Orientation HLRBRep_FaceIterator::Orientation() const
{
  return myEdges->Orientation(iEdge);
}

//=======================================================================
// function : OutLine
// purpose  :
//=======================================================================

inline Standard_Boolean HLRBRep_FaceIterator::OutLine() const
{
  return myEdges->OutLine(iEdge);
}

//=======================================================================
// function : Internal
// purpose  :
//=======================================================================

inline Standard_Boolean HLRBRep_FaceIterator::Internal() const
{
  return myEdges->Internal(iEdge);
}

//=======================================================================
// function : Double
// purpose  :
//=======================================================================

inline Standard_Boolean HLRBRep_FaceIterator::Double() const
{
  return myEdges->Double(iEdge);
}

//=======================================================================
// function : IsoLine
// purpose  :
//=======================================================================

inline Standard_Boolean HLRBRep_FaceIterator::IsoLine() const
{
  return myEdges->IsoLine(iEdge);
}
