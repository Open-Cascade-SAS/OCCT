// Created on: 1993-06-03
// Created by: Jacques GOUSSARD
// Copyright (c) 1993-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <StdFail_UndefinedDerivative.hxx>

inline void Contap_SurfFunction::Set(const gp_Pnt& Eye)
{
  myType = Contap_ContourPrs; // pers
  myEye  = Eye;
  myAng  = 0.;
}

inline void Contap_SurfFunction::Set(const gp_Dir& Direction)
{
  myType = Contap_ContourStd; // Contour app
  myDir  = Direction;
  myAng  = 0.;
}

inline void Contap_SurfFunction::Set(const gp_Dir& Direction, const Standard_Real Angle)
{
  myType   = Contap_DraftStd; // Contour vu
  myDir    = Direction;
  myAng    = Angle;
  myCosAng = Cos(M_PI / 2. + Angle);
}

inline void Contap_SurfFunction::Set(const gp_Pnt& Eye, const Standard_Real Angle)
{
  myType   = Contap_DraftPrs; // Contour vu "conique"...
  myEye    = Eye;
  myAng    = Angle;
  myCosAng = Cos(M_PI / 2. + Angle);
}

inline void Contap_SurfFunction::Set(const Standard_Real Tolerance)
{
  tol = Max(Tolerance, 1.e-12);
}

inline const gp_Pnt& Contap_SurfFunction::Point() const
{
  return solpt;
}

inline Standard_Real Contap_SurfFunction::Root() const
{
  return valf;
}

inline Standard_Real Contap_SurfFunction::Tolerance() const
{
  return tol;
}

inline const gp_Vec& Contap_SurfFunction::Direction3d()
{
  if (IsTangent())
    throw StdFail_UndefinedDerivative();
  return d3d;
}

inline const gp_Dir2d& Contap_SurfFunction::Direction2d()
{
  if (IsTangent())
    throw StdFail_UndefinedDerivative();
  return d2d;
}

inline const Handle(Adaptor3d_Surface)& Contap_SurfFunction::Surface() const
{
  return mySurf;
}

inline const gp_Pnt& Contap_SurfFunction::Eye() const
{
  return myEye;
}

inline const gp_Dir& Contap_SurfFunction::Direction() const
{
  return myDir;
}

inline Standard_Real Contap_SurfFunction::Angle() const
{
  return myAng;
}

inline Contap_TFunction Contap_SurfFunction::FunctionType() const
{
  return myType;
}
