// Copyright (c) 1995-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

//=======================================================================
// function : Intersection
// purpose  :
//=======================================================================

inline void TopBas_Interference::Intersection(const TheSubShape& I)
{
  myIntersection = I;
}

//=======================================================================
// function : Boundary
// purpose  :
//=======================================================================

inline void TopBas_Interference::Boundary(const TheShape& B)
{
  myBoundary = B;
}

//=======================================================================
// function : Orientation
// purpose  :
//=======================================================================

inline void TopBas_Interference::Orientation(const TopAbs_Orientation Or)
{
  myOrientation = Or;
}

//=======================================================================
// function : Transition
// purpose  :
//=======================================================================

inline void TopBas_Interference::Transition(const TopAbs_Orientation Or)
{
  myTransition = Or;
}

//=======================================================================
// function : BoundaryTransition
// purpose  :
//=======================================================================

inline void TopBas_Interference::BoundaryTransition(const TopAbs_Orientation Or)
{
  myBTransition = Or;
}

//=======================================================================
// function : Intersection
// purpose  :
//=======================================================================

inline const TheSubShape& TopBas_Interference::Intersection() const
{
  return myIntersection;
}

//=======================================================================
// function : ChangeIntersection
// purpose  :
//=======================================================================

inline TheSubShape& TopBas_Interference::ChangeIntersection()
{
  return myIntersection;
}

//=======================================================================
// function : Boundary
// purpose  :
//=======================================================================

inline const TheShape& TopBas_Interference::Boundary() const
{
  return myBoundary;
}

//=======================================================================
// function : ChangeBoundary
// purpose  :
//=======================================================================

inline TheShape& TopBas_Interference::ChangeBoundary()
{
  return myBoundary;
}

//=======================================================================
// function : Orientation
// purpose  :
//=======================================================================

inline TopAbs_Orientation TopBas_Interference::Orientation() const
{
  return myOrientation;
}

//=======================================================================
// function : Transition
// purpose  :
//=======================================================================

inline TopAbs_Orientation TopBas_Interference::Transition() const
{
  return myTransition;
}

//=======================================================================
// function : BoundaryTransition
// purpose  :
//=======================================================================

inline TopAbs_Orientation TopBas_Interference::BoundaryTransition() const
{
  return myBTransition;
}
