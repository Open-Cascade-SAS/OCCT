// Created on: 1992-06-24
// Created by: Gilles DEBARBOUILLE
// Copyright (c) 1992-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

//=======================================================================
// function : MAT_TListNode
// purpose  :
//=======================================================================

inline MAT_TListNode::MAT_TListNode() {}

//=======================================================================
// function : MAT_TListNode
// purpose  :
//=======================================================================

inline MAT_TListNode::MAT_TListNode(const Item& anitem)
{
  theitem = anitem;
}

//=======================================================================
// function : GetItem
// purpose  :
//=======================================================================

inline Item MAT_TListNode::GetItem() const
{
  return theitem;
}

//=======================================================================
// function : Next
// purpose  :
//=======================================================================

inline Handle(MAT_TListNode) MAT_TListNode::Next() const
{
  return thenext;
}

//=======================================================================
// function : Previous
// purpose  :
//=======================================================================

inline Handle(MAT_TListNode) MAT_TListNode::Previous() const
{
  return theprevious;
}

//=======================================================================
// function : SetItem
// purpose  :
//=======================================================================

inline void MAT_TListNode::SetItem(const Item& anitem)
{
  theitem = anitem;
}

//=======================================================================
// function : Next
// purpose  :
//=======================================================================

inline void MAT_TListNode::Next(const Handle(MAT_TListNode)& atlistnode)
{
  thenext = atlistnode;
}

//=======================================================================
// function : Previous
// purpose  :
//=======================================================================

inline void MAT_TListNode::Previous(const Handle(MAT_TListNode)& atlistnode)
{
  theprevious = atlistnode;
}
