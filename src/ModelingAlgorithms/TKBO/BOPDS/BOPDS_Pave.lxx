// Created by: Peter KURNEV
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

//=================================================================================================

inline BOPDS_Pave::BOPDS_Pave()
{
  myIndex     = -1;
  myParameter = 99.;
}

//=================================================================================================

inline void BOPDS_Pave::SetIndex(const Standard_Integer theIndex)
{
  myIndex = theIndex;
}

//=================================================================================================

inline Standard_Integer BOPDS_Pave::Index() const
{
  return myIndex;
}

//=================================================================================================

inline void BOPDS_Pave::SetParameter(const Standard_Real theParameter)
{
  myParameter = theParameter;
}

//=================================================================================================

inline Standard_Real BOPDS_Pave::Parameter() const
{
  return myParameter;
}

//=================================================================================================

inline void BOPDS_Pave::Contents(Standard_Integer& theIndex, Standard_Real& theParameter) const
{
  theIndex     = myIndex;
  theParameter = myParameter;
}

//=================================================================================================

inline Standard_Boolean BOPDS_Pave::IsLess(const BOPDS_Pave& theOther) const
{
  return myParameter < theOther.myParameter;
}

//=================================================================================================

inline Standard_Boolean BOPDS_Pave::IsEqual(const BOPDS_Pave& theOther) const
{
  Standard_Boolean bFlag;
  //
  bFlag = ((myIndex == theOther.myIndex) && (myParameter == theOther.myParameter));
  return bFlag;
}
