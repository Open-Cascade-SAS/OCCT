// Created by: Eugeny MALTCHIKOV
// Copyright (c) 2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

//=======================================================================
// function : BOPAlgo_MakerVolume
// purpose  :
//=======================================================================
inline BOPAlgo_MakerVolume::BOPAlgo_MakerVolume()
    : BOPAlgo_Builder(),
      myIntersect(Standard_True),
      myAvoidInternalShapes(Standard_False)
{
}

//=======================================================================
// function : BOPAlgo_MakerVolume
// purpose  :
//=======================================================================
inline BOPAlgo_MakerVolume::BOPAlgo_MakerVolume(
  const Handle(NCollection_BaseAllocator)& theAllocator)
    : BOPAlgo_Builder(theAllocator),
      myIntersect(Standard_True),
      myAvoidInternalShapes(Standard_False)
{
}

//=======================================================================
// function : ~BOPAlgo_MakerVolume
// purpose  :
//=======================================================================
inline BOPAlgo_MakerVolume::~BOPAlgo_MakerVolume()
{
  Clear();
}

//=======================================================================
// function : Clear
// purpose  :
//=======================================================================
inline void BOPAlgo_MakerVolume::Clear()
{
  BOPAlgo_Builder::Clear();
  myIntersect = Standard_True;
  myBBox      = Bnd_Box();
  mySBox.Nullify();
  myFaces.Clear();
  myAvoidInternalShapes = Standard_False;
}

//=======================================================================
// function : SetIntersect
// purpose  :
//=======================================================================
inline void BOPAlgo_MakerVolume::SetIntersect(const Standard_Boolean bIntersect)
{
  myIntersect = bIntersect;
}

//=======================================================================
// function : IsIntersect
// purpose  :
//=======================================================================
inline Standard_Boolean BOPAlgo_MakerVolume::IsIntersect() const
{
  return myIntersect;
}

//=======================================================================
// function : Box
// purpose  :
//=======================================================================
inline const TopoDS_Solid& BOPAlgo_MakerVolume::Box() const
{
  return mySBox;
}

//=======================================================================
// function : Faces
// purpose  :
//=======================================================================
inline const TopTools_ListOfShape& BOPAlgo_MakerVolume::Faces() const
{
  return myFaces;
}
