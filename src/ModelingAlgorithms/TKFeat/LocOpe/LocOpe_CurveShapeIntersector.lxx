// Created on: 1995-05-29
// Created by: Jacques GOUSSARD
// Copyright (c) 1995-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <StdFail_NotDone.hxx>

//=================================================================================================

inline LocOpe_CurveShapeIntersector::LocOpe_CurveShapeIntersector()
    : myDone(Standard_False)
{
}

//=================================================================================================

inline LocOpe_CurveShapeIntersector::LocOpe_CurveShapeIntersector(const gp_Ax1&       Axis,
                                                                  const TopoDS_Shape& S)
{
  Init(Axis, S);
}

//=================================================================================================

inline LocOpe_CurveShapeIntersector::LocOpe_CurveShapeIntersector(const gp_Circ&      C,
                                                                  const TopoDS_Shape& S)
{
  Init(C, S);
}

//=================================================================================================

inline Standard_Boolean LocOpe_CurveShapeIntersector::IsDone() const
{
  return myDone;
}

//=================================================================================================

inline Standard_Integer LocOpe_CurveShapeIntersector::NbPoints() const
{
  if (!myDone)
  {
    throw StdFail_NotDone();
  }
  return myPoints.Length();
}

//=================================================================================================

inline const LocOpe_PntFace& LocOpe_CurveShapeIntersector::Point(const Standard_Integer I) const
{
  if (!myDone)
  {
    throw StdFail_NotDone();
  }
  return myPoints(I);
}
