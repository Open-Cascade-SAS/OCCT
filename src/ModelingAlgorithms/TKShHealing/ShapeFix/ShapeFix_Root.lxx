// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <Precision.hxx>

//=================================================================================================

inline Handle(ShapeBuild_ReShape) ShapeFix_Root::Context() const
{
  return myContext;
}

//=================================================================================================

inline Handle(ShapeExtend_BasicMsgRegistrator) ShapeFix_Root::MsgRegistrator() const
{
  return myMsgReg;
}

//=================================================================================================

inline Standard_Real ShapeFix_Root::Precision() const
{
  return myPrecision;
}

//=================================================================================================

inline Standard_Real ShapeFix_Root::MinTolerance() const
{
  return myMinTol;
}

//=================================================================================================

inline Standard_Real ShapeFix_Root::MaxTolerance() const
{
  return myMaxTol;
}

//=================================================================================================

inline Standard_Real ShapeFix_Root::LimitTolerance(const Standard_Real toler) const
{
  // only maximal restriction implemented.
  return Min(myMaxTol, toler);
}

//=================================================================================================

inline void ShapeFix_Root::SendMsg(const Message_Msg& message, const Message_Gravity gravity) const
{
  SendMsg(myShape, message, gravity);
}

//=================================================================================================

inline void ShapeFix_Root::SendWarning(const TopoDS_Shape& shape, const Message_Msg& message) const
{
  SendMsg(shape, message, Message_Warning);
}

//=================================================================================================

inline void ShapeFix_Root::SendWarning(const Message_Msg& message) const
{
  SendWarning(myShape, message);
}

//=================================================================================================

inline void ShapeFix_Root::SendFail(const TopoDS_Shape& shape, const Message_Msg& message) const
{
  SendMsg(shape, message, Message_Fail);
}

//=================================================================================================

inline void ShapeFix_Root::SendFail(const Message_Msg& message) const
{
  SendFail(myShape, message);
}

//=======================================================================
// function : NeedFix
// purpose  : Function used to define if the fixing method needs to be called
//           according to its specific flag if it is set, or
//           to some additional criteria (if Flag is default)
//=======================================================================

inline Standard_Boolean ShapeFix_Root::NeedFix(const Standard_Integer Flag,
                                               const Standard_Boolean need)
{
  return Flag < 0 ? need : (Flag > 0);
}
