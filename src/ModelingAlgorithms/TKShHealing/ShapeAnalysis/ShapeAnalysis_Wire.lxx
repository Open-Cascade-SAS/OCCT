// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

//: pdn 05.01.99: renaming method ...Little to ...Small
#include <ShapeExtend.hxx>
#include <ShapeExtend_WireData.hxx>

//=======================================================================
// function : IsLoaded
// purpose  :
//=======================================================================

inline Standard_Boolean ShapeAnalysis_Wire::IsLoaded() const
{
  return !myWire.IsNull() && myWire->NbEdges() > 0;
}

//=======================================================================
// function : IsReady
// purpose  :
//=======================================================================

inline Standard_Boolean ShapeAnalysis_Wire::IsReady() const
{
  return IsLoaded() && !myFace.IsNull();
}

//=======================================================================
// function : Precision
// purpose  :
//=======================================================================

inline Standard_Real ShapeAnalysis_Wire::Precision() const
{
  return myPrecision;
}

//=======================================================================
// function : WireData
// purpose  :
//=======================================================================

inline const Handle(ShapeExtend_WireData)& ShapeAnalysis_Wire::WireData() const
{
  return myWire;
}

//=======================================================================
// function : NbEdges
// purpose  :
//=======================================================================

inline Standard_Integer ShapeAnalysis_Wire::NbEdges() const
{
  return myWire.IsNull() ? 0 : myWire->NbEdges();
}

//=======================================================================
// function : Face
// purpose  :
//=======================================================================

inline const TopoDS_Face& ShapeAnalysis_Wire::Face() const
{
  return myFace;
}

//=======================================================================
// function : Surface
// purpose  :
//=======================================================================

inline const Handle(ShapeAnalysis_Surface)& ShapeAnalysis_Wire::Surface() const
{
  return mySurf;
}

//=======================================================================
// function : StatusOrder
// purpose  :
//=======================================================================

inline Standard_Boolean ShapeAnalysis_Wire::StatusOrder(const ShapeExtend_Status Status) const
{
  return ShapeExtend::DecodeStatus(myStatusOrder, Status);
}

//=======================================================================
// function : StatusConnected
// purpose  :
//=======================================================================

inline Standard_Boolean ShapeAnalysis_Wire::StatusConnected(const ShapeExtend_Status Status) const
{
  return ShapeExtend::DecodeStatus(myStatusConnected, Status);
}

//=======================================================================
// function : StatusEdgeCurves
// purpose  :
//=======================================================================

inline Standard_Boolean ShapeAnalysis_Wire::StatusEdgeCurves(const ShapeExtend_Status Status) const
{
  return ShapeExtend::DecodeStatus(myStatusEdgeCurves, Status);
}

//=======================================================================
// function : StatusDegenerated
// purpose  :
//=======================================================================

inline Standard_Boolean ShapeAnalysis_Wire::StatusDegenerated(const ShapeExtend_Status Status) const
{
  return ShapeExtend::DecodeStatus(myStatusDegenerated, Status);
}

//=======================================================================
// function : StatusClosed
// purpose  :
//=======================================================================

inline Standard_Boolean ShapeAnalysis_Wire::StatusClosed(const ShapeExtend_Status Status) const
{
  return ShapeExtend::DecodeStatus(myStatusClosed, Status);
}

//=======================================================================
// function : StatusSmall
// purpose  :
//=======================================================================

inline Standard_Boolean ShapeAnalysis_Wire::StatusSmall(const ShapeExtend_Status Status) const
{
  return ShapeExtend::DecodeStatus(myStatusSmall, Status);
}

//=======================================================================
// function : StatusSelfIntersection
// purpose  :
//=======================================================================

inline Standard_Boolean ShapeAnalysis_Wire::StatusSelfIntersection(
  const ShapeExtend_Status Status) const
{
  return ShapeExtend::DecodeStatus(myStatusSelfIntersection, Status);
}

//=======================================================================
// function : StatusLacking
// purpose  :
//=======================================================================

inline Standard_Boolean ShapeAnalysis_Wire::StatusLacking(const ShapeExtend_Status Status) const
{
  return ShapeExtend::DecodeStatus(myStatusLacking, Status);
}

//=======================================================================
// function : StatusGaps3d
// purpose  :
//=======================================================================

inline Standard_Boolean ShapeAnalysis_Wire::StatusGaps3d(const ShapeExtend_Status Status) const
{
  return ShapeExtend::DecodeStatus(myStatusGaps3d, Status);
}

//=======================================================================
// function : StatusGaps2d
// purpose  :
//=======================================================================

inline Standard_Boolean ShapeAnalysis_Wire::StatusGaps2d(const ShapeExtend_Status Status) const
{
  return ShapeExtend::DecodeStatus(myStatusGaps2d, Status);
}

//=======================================================================
// function : StatusCurveGaps
// purpose  :
//=======================================================================

inline Standard_Boolean ShapeAnalysis_Wire::StatusCurveGaps(const ShapeExtend_Status Status) const
{
  return ShapeExtend::DecodeStatus(myStatusCurveGaps, Status);
}

//=======================================================================
// function : StatusLoop
// purpose  :
//=======================================================================

inline Standard_Boolean ShapeAnalysis_Wire::StatusLoop(const ShapeExtend_Status Status) const
{
  return ShapeExtend::DecodeStatus(myStatusLoop, Status);
}

//=======================================================================
// function : Status
// purpose  :
//=======================================================================

inline Standard_Boolean ShapeAnalysis_Wire::LastCheckStatus(const ShapeExtend_Status Status) const
{
  return ShapeExtend::DecodeStatus(myStatus, Status);
}

//=======================================================================
// function : MinDistance3d
// purpose  :
//=======================================================================

inline Standard_Real ShapeAnalysis_Wire::MinDistance3d() const
{
  return myMin3d;
}

//=======================================================================
// function : MinDistance2d
// purpose  :
//=======================================================================

inline Standard_Real ShapeAnalysis_Wire::MinDistance2d() const
{
  return myMin2d;
}

//=======================================================================
// function : MaxDistance3d
// purpose  :
//=======================================================================

inline Standard_Real ShapeAnalysis_Wire::MaxDistance3d() const
{
  return myMax3d;
}

//=======================================================================
// function : MaxDistance2d
// purpose  :
//=======================================================================

inline Standard_Real ShapeAnalysis_Wire::MaxDistance2d() const
{
  return myMax2d;
}
