// Created on: 1999-06-22
// Created by: Roman LYGIN
// Copyright (c) 1999-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

//=================================================================================================


inline Standard_Real ShapeExtend_ComplexCurve::ReversedParameter(const Standard_Real U) const
{
  return (1 - U);
}

//=================================================================================================


inline Standard_Real ShapeExtend_ComplexCurve::FirstParameter() const
{
  return 0;
}

//=================================================================================================


inline Standard_Real ShapeExtend_ComplexCurve::LastParameter() const
{
  return 1;
}

//=================================================================================================


inline Standard_Boolean ShapeExtend_ComplexCurve::IsClosed() const
{
  return myClosed;
}

//=================================================================================================


inline Standard_Boolean ShapeExtend_ComplexCurve::IsPeriodic() const
{
  return Standard_False;
}

//=================================================================================================


inline GeomAbs_Shape ShapeExtend_ComplexCurve::Continuity() const
{
  return GeomAbs_C0;
}

//=================================================================================================


inline Standard_Boolean ShapeExtend_ComplexCurve::IsCN(const Standard_Integer N) const
{
  return N <= 0;
}
