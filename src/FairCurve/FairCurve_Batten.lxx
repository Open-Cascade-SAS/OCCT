// Created on: 1996-02-05
// Created by: Philippe MANGIN
// Copyright (c) 1996-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <Standard_NegativeValue.hxx>

inline Standard_OStream& operator<<(Standard_OStream& o, const FairCurve_Batten& Bat)
{
  Bat.Dump(o);
  return o;
}

inline void FairCurve_Batten::SetFreeSliding(const Standard_Boolean FreeSliding)
{
  NewFreeSliding = FreeSliding;
}

inline void FairCurve_Batten::SetConstraintOrder1(const Standard_Integer ConstraintOrder)
{
  NewConstraintOrder1 = ConstraintOrder;
}

inline void FairCurve_Batten::SetConstraintOrder2(const Standard_Integer ConstraintOrder)
{
  NewConstraintOrder2 = ConstraintOrder;
}

inline void FairCurve_Batten::SetAngle1(const Standard_Real Angle1)
{
  NewAngle1 = Angle1;
}

inline void FairCurve_Batten::SetAngle2(const Standard_Real Angle2)
{
  NewAngle2 = Angle2;
}

inline void FairCurve_Batten::SetHeight(const Standard_Real Height)
{
  if (Height <= 0)
    throw Standard_NegativeValue("FairCurve : Height is no positive");
  NewHeight = Height;
}

inline void FairCurve_Batten::SetSlope(const Standard_Real Slope)
{
  NewSlope = Slope;
}

inline void FairCurve_Batten::SetSlidingFactor(const Standard_Real SlidingFactor)
{
  NewSlidingFactor = SlidingFactor;
}

inline Standard_Boolean FairCurve_Batten::GetFreeSliding() const
{
  return OldFreeSliding;
}

inline Standard_Integer FairCurve_Batten::GetConstraintOrder1() const
{
  return OldConstraintOrder1;
}

inline Standard_Integer FairCurve_Batten::GetConstraintOrder2() const
{
  return OldConstraintOrder2;
}

inline const gp_Pnt2d& FairCurve_Batten::GetP1() const
{
  return OldP1;
}

inline const gp_Pnt2d& FairCurve_Batten::GetP2() const
{
  return OldP2;
}

inline Standard_Real FairCurve_Batten::GetAngle1() const
{
  return OldAngle1;
}

inline Standard_Real FairCurve_Batten::GetAngle2() const
{
  return OldAngle2;
}

inline Standard_Real FairCurve_Batten::GetHeight() const
{
  return OldHeight;
}

inline Standard_Real FairCurve_Batten::GetSlope() const
{
  return OldSlope;
}

inline Standard_Real FairCurve_Batten::GetSlidingFactor() const
{
  return OldSlidingFactor;
}
