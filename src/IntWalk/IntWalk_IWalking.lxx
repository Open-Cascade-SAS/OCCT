// Copyright (c) 1995-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <StdFail_NotDone.hxx>

#include IntWalk_TheIWLine_hxx

inline void IntWalk_IWalking::SetTolerance(const Standard_Real Epsilon,
                                           const Standard_Real Deflection,
                                           const Standard_Real Increment)
{
  fleche  = Deflection;
  pas     = Increment;
  epsilon = Epsilon * Epsilon;
}

inline Standard_Boolean IntWalk_IWalking::IsDone() const
{
  return done;
}

inline Standard_Integer IntWalk_IWalking::NbLines() const
{
  if (!done)
    throw StdFail_NotDone();
  return lines.Length();
}

inline const Handle(IntWalk_TheIWLine)& IntWalk_IWalking::Value(const Standard_Integer Index) const
{
  if (!done)
    throw StdFail_NotDone();
  return lines.Value(Index);
}

inline Standard_Integer IntWalk_IWalking::NbSinglePnts() const
{
  if (!done)
    throw StdFail_NotDone();
  return seqSingle.Length();
}

inline const ThePointOfPath& IntWalk_IWalking::SinglePnt(const Standard_Integer Index) const
{
  if (!done)
    throw StdFail_NotDone();
  return seqSingle.Value(Index);
}
