// Copyright (c) 1995-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <StdFail_NotDone.hxx>
#include <Standard_OutOfRange.hxx>

inline Standard_Boolean IntAna_IntLinTorus::IsDone() const
{
  return done;
}

inline Standard_Integer IntAna_IntLinTorus::NbPoints() const
{
  if (!done)
  {
    throw StdFail_NotDone();
  }
  return nbpt;
}

inline const gp_Pnt& IntAna_IntLinTorus::Value(const Standard_Integer Index) const
{

  if (!done)
  {
    throw StdFail_NotDone();
  }
  if (Index <= 0 || Index > nbpt)
  {
    throw Standard_OutOfRange();
  }
  return thePoint[Index - 1];
}

inline Standard_Real IntAna_IntLinTorus::ParamOnLine(const Standard_Integer Index) const
{

  if (!done)
  {
    throw StdFail_NotDone();
  }
  if (Index <= 0 || Index > nbpt)
  {
    throw Standard_OutOfRange();
  }
  return theParam[Index - 1];
}

inline void IntAna_IntLinTorus::ParamOnTorus(const Standard_Integer Index,
                                             Standard_Real&         FI,
                                             Standard_Real&         THETA) const
{

  if (!done)
  {
    throw StdFail_NotDone();
  }
  if (Index <= 0 || Index > nbpt)
  {
    throw Standard_OutOfRange();
  }
  FI    = theFi[Index - 1];
  THETA = theTheta[Index - 1];
}
