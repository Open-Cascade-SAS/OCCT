// Copyright (c) 1995-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <Blend_SequenceOfPoint.hxx>
#include <Standard_DomainError.hxx>

inline void BRepBlend_Line::Append(const Blend_Point& P)
{
  seqpt.Append(P);
}

inline void BRepBlend_Line::Prepend(const Blend_Point& P)
{
  seqpt.Prepend(P);
}

inline void BRepBlend_Line::InsertBefore(const Standard_Integer Index, const Blend_Point& P)
{
  seqpt.InsertBefore(Index, P);
}

inline void BRepBlend_Line::Remove(const Standard_Integer FromIndex, const Standard_Integer ToIndex)
{
  seqpt.Remove(FromIndex, ToIndex);
}

inline void BRepBlend_Line::SetStartPoints(const BRepBlend_Extremity& StartPtOnS1,
                                           const BRepBlend_Extremity& StartPtOnS2)

{
  stp1 = StartPtOnS1;
  stp2 = StartPtOnS2;
}

inline void BRepBlend_Line::SetEndPoints(const BRepBlend_Extremity& EndPtOnS1,
                                         const BRepBlend_Extremity& EndPtOnS2)

{
  endp1 = EndPtOnS1;
  endp2 = EndPtOnS2;
}

inline Standard_Integer BRepBlend_Line::NbPoints() const
{
  return seqpt.Length();
}

inline const Blend_Point& BRepBlend_Line::Point(const Standard_Integer Index) const
{
  return seqpt(Index);
}

inline IntSurf_TypeTrans BRepBlend_Line::TransitionOnS1() const
{
  if (!hass1)
  {
    throw Standard_DomainError();
  }
  return tras1;
}

inline IntSurf_TypeTrans BRepBlend_Line::TransitionOnS2() const
{
  if (!hass2)
  {
    throw Standard_DomainError();
  }
  return tras2;
}

inline const BRepBlend_Extremity& BRepBlend_Line::StartPointOnFirst() const
{
  return stp1;
}

inline const BRepBlend_Extremity& BRepBlend_Line::StartPointOnSecond() const
{
  return stp2;
}

inline const BRepBlend_Extremity& BRepBlend_Line::EndPointOnFirst() const
{
  return endp1;
}

inline const BRepBlend_Extremity& BRepBlend_Line::EndPointOnSecond() const
{
  return endp2;
}

inline IntSurf_TypeTrans BRepBlend_Line::TransitionOnS() const
{
  if (!hass1)
  {
    throw Standard_DomainError();
  }
  return tras1;
}
