// Copyright (c) 1995-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <Standard_DomainError.hxx>

inline const gp_Pnt& BRepBlend_Extremity::Value() const
{
  return pt;
}

inline void BRepBlend_Extremity::SetTangent(const gp_Vec& Tangent)
{
  hastang = Standard_True;
  tang    = Tangent;
}

inline Standard_Boolean BRepBlend_Extremity::HasTangent() const
{
  return hastang;
}

inline const gp_Vec& BRepBlend_Extremity::Tangent() const
{
  if (!hastang)
  {
    throw Standard_DomainError();
  }
  return tang;
}

inline void BRepBlend_Extremity::Parameters(Standard_Real& U, Standard_Real& V) const
{
  U = u;
  V = v;
}

inline Standard_Real BRepBlend_Extremity::Tolerance() const
{
  return tol;
}

inline Standard_Boolean BRepBlend_Extremity::IsVertex() const
{
  return isvtx;
}

inline const Handle(Adaptor3d_HVertex)& BRepBlend_Extremity::Vertex() const
{
  if (!isvtx)
  {
    throw Standard_DomainError();
  }
  return vtx;
}

inline Standard_Integer BRepBlend_Extremity::NbPointOnRst() const
{
  return seqpt.Length();
}

inline const BRepBlend_PointOnRst& BRepBlend_Extremity::PointOnRst(
  const Standard_Integer Index) const
{
  return seqpt(Index);
}

inline Standard_Real BRepBlend_Extremity::Parameter() const

{
  return u;
}

inline Standard_Real BRepBlend_Extremity::ParameterOnGuide() const

{
  return param;
}
