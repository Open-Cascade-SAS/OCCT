// Created on: 1991-06-24
// Created by: Didier PIFFAULT
// Copyright (c) -1999 Matra Datavision
// Copyright (c) 1991-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

//=======================================================================
// Return the number of sections points in an interference.
//=======================================================================

inline Standard_Integer Intf_Interference::NbSectionPoints() const
{
  return mySPoins.Length();
}

//=======================================================================
// Give the section point of range Index in the interference.
//=======================================================================

inline const Intf_SectionPoint& Intf_Interference::PntValue(const Standard_Integer Index) const
{
  return mySPoins(Index);
}

//=======================================================================
// Return the number of sections lines in an interference.
//=======================================================================

inline Standard_Integer Intf_Interference::NbSectionLines() const
{
  return mySLines.Length();
}

//=======================================================================
// Give the section line of range Index in the interference.
//=======================================================================

inline const Intf_SectionLine& Intf_Interference::LineValue(const Standard_Integer Index) const
{
  return mySLines(Index);
}

//=======================================================================
// Return the number of sections TangentZones in an interference.
//=======================================================================

inline Standard_Integer Intf_Interference::NbTangentZones() const
{
  return myTZones.Length();
}

//=======================================================================
// Give the tangentzone of range Index in the interference.
//=======================================================================

inline const Intf_TangentZone& Intf_Interference::ZoneValue(const Standard_Integer Index) const
{
  return myTZones(Index);
}

//=======================================================================
// function : GetTolerance
// purpose  :
//=======================================================================

inline Standard_Real Intf_Interference::GetTolerance() const
{
  return Tolerance;
}
