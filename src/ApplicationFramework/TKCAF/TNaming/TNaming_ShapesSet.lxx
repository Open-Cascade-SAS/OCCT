// Created on: 1997-01-09
// Created by: Yves FRICAUD
// Copyright (c) 1997-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <TopTools_MapOfShape.hxx>

//=======================================================================
// function : TNaming_ShapesSet
// purpose  :
//=======================================================================

inline TNaming_ShapesSet::TNaming_ShapesSet() {}

//=======================================================================
// function : Clear
// purpose  :
//=======================================================================

inline void TNaming_ShapesSet::Clear()
{
  myMap.Clear();
}

//=======================================================================
// function : Add
// purpose  :
//=======================================================================

inline Standard_Boolean TNaming_ShapesSet::Add(const TopoDS_Shape& S)
{
  return myMap.Add(S);
}

//=======================================================================
// function : Standard_Boolean
// purpose  :
//=======================================================================

inline Standard_Boolean TNaming_ShapesSet::Contains(const TopoDS_Shape& S) const
{
  return myMap.Contains(S);
}

//=======================================================================
// function : Standard_Boolean
// purpose  :
//=======================================================================

inline Standard_Boolean TNaming_ShapesSet::Remove(const TopoDS_Shape& S)
{
  return myMap.Remove(S);
}

//=======================================================================
// function : IsEmpty
// purpose  :
//=======================================================================

inline Standard_Boolean TNaming_ShapesSet::IsEmpty() const
{
  return myMap.IsEmpty();
}

//=======================================================================
// function : NbShapes
// purpose  :
//=======================================================================

inline Standard_Integer TNaming_ShapesSet::NbShapes() const
{
  return myMap.Extent();
}

//=======================================================================
// function : ChangeMap
// purpose  :
//=======================================================================

inline TopTools_MapOfShape& TNaming_ShapesSet::ChangeMap()
{
  return myMap;
}

//=======================================================================
// function : Map
// purpose  :
//=======================================================================

inline const TopTools_MapOfShape& TNaming_ShapesSet::Map() const
{
  return myMap;
}
