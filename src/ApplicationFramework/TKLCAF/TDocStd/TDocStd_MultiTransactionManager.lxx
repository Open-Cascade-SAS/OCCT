// Created on: 2002-11-20
// Created by: Vladimir ANIKIN
// Copyright (c) 2002-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

//=======================================================================
// function : GetUndoLimit
// purpose  :
//=======================================================================

inline Standard_Integer TDocStd_MultiTransactionManager::GetUndoLimit() const
{
  return myUndoLimit;
}

//=======================================================================
// function : GetAvailableUndos
// purpose  :
//=======================================================================

inline const TDocStd_SequenceOfApplicationDelta& TDocStd_MultiTransactionManager::
  GetAvailableUndos() const
{
  return myUndos;
}

//=======================================================================
// function : GetAvailableRedos
// purpose  :
//=======================================================================

inline const TDocStd_SequenceOfApplicationDelta& TDocStd_MultiTransactionManager::
  GetAvailableRedos() const
{
  return myRedos;
}

//=======================================================================
// function : Documents
// purpose  :
//=======================================================================

inline const TDocStd_SequenceOfDocument& TDocStd_MultiTransactionManager::Documents() const
{
  return myDocuments;
}

//=======================================================================
// function : IsNestedTransactionMode
// purpose  :
//=======================================================================

inline Standard_Boolean TDocStd_MultiTransactionManager::IsNestedTransactionMode() const
{
  return myIsNestedTransactionMode;
}

//=======================================================================
// function : HasOpenCommand
// purpose  :
//=======================================================================

inline Standard_Boolean TDocStd_MultiTransactionManager::HasOpenCommand() const
{
  return myOpenTransaction;
}

//=======================================================================
// function : ModificationMode
// purpose  : returns True if changes allowed only inside transactions
//=======================================================================

inline Standard_Boolean TDocStd_MultiTransactionManager::ModificationMode() const
{
  return myOnlyTransactionModification;
}
