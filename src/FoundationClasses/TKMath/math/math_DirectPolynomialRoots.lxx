// Copyright (c) 1997-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <Standard_RangeError.hxx>
#include <StdFail_InfiniteSolutions.hxx>

inline Standard_Boolean math_DirectPolynomialRoots::IsDone() const
{
  return Done;
}

inline Standard_Boolean math_DirectPolynomialRoots::InfiniteRoots() const
{
  return InfiniteStatus;
}

inline Standard_OStream& operator<<(Standard_OStream& o, const math_DirectPolynomialRoots& D)
{
  D.Dump(o);
  return o;
}

inline Standard_Integer math_DirectPolynomialRoots::NbSolutions() const
{
  StdFail_InfiniteSolutions_Raise_if(InfiniteStatus, " ");
  return NbSol;
}

inline Standard_Real math_DirectPolynomialRoots::Value(const Standard_Integer Nieme) const
{
  StdFail_InfiniteSolutions_Raise_if(InfiniteStatus, " ");
  Standard_RangeError_Raise_if((Nieme < 0) || (Nieme > NbSol), " ");
  return TheRoots[Nieme - 1];
}

inline Standard_Real math_DirectPolynomialRoots::ScienceValue(const Standard_Integer Nieme) const
{
  StdFail_InfiniteSolutions_Raise_if(InfiniteStatus, " ");
  Standard_RangeError_Raise_if((Nieme < 1) || (Nieme > NbSol),
                               "math_DirectPolynomialRoots::ScienceValue");

  // Scientific ordering: within each pair, larger root first
  if (NbSol == 4)
  {
    if (Nieme == 1)
      return (TheRoots[0] > TheRoots[1]) ? TheRoots[0] : TheRoots[1]; // Larger from first pair
    if (Nieme == 2)
      return (TheRoots[0] < TheRoots[1]) ? TheRoots[0] : TheRoots[1]; // Smaller from first pair
    if (Nieme == 3)
      return (TheRoots[2] > TheRoots[3]) ? TheRoots[2] : TheRoots[3]; // Larger from second pair
    if (Nieme == 4)
      return (TheRoots[2] < TheRoots[3]) ? TheRoots[2] : TheRoots[3]; // Smaller from second pair
  }
  else if (NbSol == 2)
  {
    if (Nieme == 1)
      return (TheRoots[0] > TheRoots[1]) ? TheRoots[0] : TheRoots[1]; // Larger root
    if (Nieme == 2)
      return (TheRoots[0] < TheRoots[1]) ? TheRoots[0] : TheRoots[1]; // Smaller root
  }

  // For single root or cubic, return in original order
  return TheRoots[Nieme - 1];
}
