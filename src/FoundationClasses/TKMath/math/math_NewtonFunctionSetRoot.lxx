// Copyright (c) 1997-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <StdFail_NotDone.hxx>

inline Standard_Boolean math_NewtonFunctionSetRoot::IsSolutionReached(
  math_FunctionSetWithDerivatives&)
{
  for (Standard_Integer i = DeltaX.Lower(); i <= DeltaX.Upper(); ++i)
    if (Abs(DeltaX(i)) > TolX(i) || Abs(FValues(i)) > TolF)
      return Standard_False;

  return Standard_True;
}

inline Standard_Boolean math_NewtonFunctionSetRoot::IsDone() const
{
  return Done;
}

inline Standard_OStream& operator<<(Standard_OStream& o, const math_NewtonFunctionSetRoot& N)
{
  N.Dump(o);
  return o;
}

inline const math_Vector& math_NewtonFunctionSetRoot::Root() const
{
  StdFail_NotDone_Raise_if(!Done, " ");
  return Sol;
}

inline void math_NewtonFunctionSetRoot::Root(math_Vector& Root) const
{
  StdFail_NotDone_Raise_if(!Done, " ");
  Root = Sol;
}

inline const math_Matrix& math_NewtonFunctionSetRoot::Derivative() const
{
  StdFail_NotDone_Raise_if(!Done, " ");
  return Jacobian;
}

inline void math_NewtonFunctionSetRoot::Derivative(math_Matrix& Der) const
{
  StdFail_NotDone_Raise_if(!Done, " ");
  Der = Jacobian;
}

inline const math_Vector& math_NewtonFunctionSetRoot::FunctionSetErrors() const
{
  StdFail_NotDone_Raise_if(!Done, " ");
  return DeltaX;
}

inline void math_NewtonFunctionSetRoot::FunctionSetErrors(math_Vector& Err) const
{
  StdFail_NotDone_Raise_if(!Done, " ");
  Err = DeltaX;
}

inline Standard_Integer math_NewtonFunctionSetRoot::NbIterations() const
{
  StdFail_NotDone_Raise_if(!Done, " ");
  return Iter;
}
