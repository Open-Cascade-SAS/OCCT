// Created on: 2005-12-08
// Created by: Sergey KHROMOV
// Copyright (c) 2005-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <StdFail_NotDone.hxx>

//==========================================================================
// function : IsDone
//           Returns Standard_True if computation is performed successfully.
//==========================================================================

inline Standard_Boolean math_KronrodSingleIntegration::IsDone() const
{
  return myIsDone;
}

//==========================================================================
// function : Value
//           Returns the value of the integral.
//==========================================================================

inline Standard_Real math_KronrodSingleIntegration::Value() const
{
  StdFail_NotDone_Raise_if(!myIsDone, "math_KronrodSingleIntegration");
  return myValue;
}

//==========================================================================
// function : ErrorReached
//           Returns the value of the relative error reached.
//==========================================================================

inline Standard_Real math_KronrodSingleIntegration::ErrorReached() const
{
  StdFail_NotDone_Raise_if(!myIsDone, "math_KronrodSingleIntegration");
  return myErrorReached;
}

//=======================================================================
// function : AbsolutError
// purpose  :
//=======================================================================

inline Standard_Real math_KronrodSingleIntegration::AbsolutError() const
{
  StdFail_NotDone_Raise_if(!myIsDone, "math_KronrodSingleIntegration");
  return myAbsolutError;
}

//==========================================================================
// function : OrderReached
//           Returns the number of Kronrod points for which the result
//           is computed.
//==========================================================================

inline Standard_Integer math_KronrodSingleIntegration::OrderReached() const
{
  StdFail_NotDone_Raise_if(!myIsDone, "math_KronrodSingleIntegration");
  return myNbPntsReached;
}

//==========================================================================
// function : NbIterReached
//           Returns the number of iterations that were made to compute result.
//==========================================================================

inline Standard_Integer math_KronrodSingleIntegration::NbIterReached() const
{
  StdFail_NotDone_Raise_if(!myIsDone, "math_KronrodSingleIntegration");
  return myNbIterReached;
}
