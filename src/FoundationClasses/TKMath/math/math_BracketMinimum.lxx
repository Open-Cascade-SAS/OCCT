// Copyright (c) 1997-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

// math_BracketMinimum.lxx

#include <Precision.hxx>

inline math_BracketMinimum::math_BracketMinimum(const Standard_Real A, const Standard_Real B)
    : Done(Standard_False),
      Ax(A),
      Bx(B),
      Cx(0.),
      FAx(0.),
      FBx(0.),
      FCx(0.),
      myLeft(-Precision::Infinite()),
      myRight(Precision::Infinite()),
      myIsLimited(Standard_False),
      myFA(Standard_False),
      myFB(Standard_False)
{
}

inline Standard_Boolean math_BracketMinimum::IsDone() const
{
  return Done;
}

inline Standard_OStream& operator<<(Standard_OStream& o, const math_BracketMinimum& Br)
{
  Br.Dump(o);
  return o;
}

inline void math_BracketMinimum::SetLimits(const Standard_Real theLeft,
                                           const Standard_Real theRight)
{
  myLeft      = theLeft;
  myRight     = theRight;
  myIsLimited = Standard_True;
}

inline void math_BracketMinimum::SetFA(const Standard_Real theValue)
{
  FAx  = theValue;
  myFA = Standard_True;
}

inline void math_BracketMinimum::SetFB(const Standard_Real theValue)
{
  FBx  = theValue;
  myFB = Standard_True;
}

inline Standard_Real math_BracketMinimum::Limited(const Standard_Real theValue) const
{
  return theValue < myLeft ? myLeft : theValue > myRight ? myRight : theValue;
}
