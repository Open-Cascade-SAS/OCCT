// Created on: 1993-01-11
// Created by: Remi LEQUETTE
// Copyright (c) 1993-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <Standard_HashUtils.hxx>
#include <TopLoc_SListOfItemLocation.hxx>
#include <TopLoc_Datum3D.hxx>
#include <TopLoc_ItemLocation.hxx>

//=======================================================================
// function : IsIdentity
// purpose  :
//=======================================================================

inline Standard_Boolean TopLoc_Location::IsIdentity() const
{
  return myItems.IsEmpty();
}

//=======================================================================
// function : Identity
// purpose  :
//=======================================================================

inline void TopLoc_Location::Identity()
{
  myItems.Clear();
}

//=======================================================================
// function : FirstDatum
// purpose  :
//=======================================================================

inline const Handle(TopLoc_Datum3D)& TopLoc_Location::FirstDatum() const
{
  return myItems.Value().myDatum;
}

//=======================================================================
// function : FirstPower
// purpose  :
//=======================================================================

inline Standard_Integer TopLoc_Location::FirstPower() const
{
  return myItems.Value().myPower;
}

//=======================================================================
// function : NextLocation
// purpose  :
//=======================================================================

inline const TopLoc_Location& TopLoc_Location::NextLocation() const
{
  return (*(TopLoc_Location*)&(myItems.Tail()));
}

//=======================================================================
// function : HashCode
// purpose  :
//=======================================================================
inline size_t TopLoc_Location::HashCode() const
{
  // Hashing base on IsEqual function
  if (myItems.IsEmpty())
  {
    return 0;
  }
  size_t                     aHash = opencascade::MurmurHash::optimalSeed<size_t>();
  TopLoc_SListOfItemLocation items = myItems;
  size_t                     aCombined[3];
  while (items.More())
  {
    aCombined[0] = std::hash<Handle(TopLoc_Datum3D)>{}(items.Value().myDatum);
    aCombined[1] = opencascade::hash(items.Value().myPower);
    aCombined[2] = aHash;
    aHash        = opencascade::hashBytes(aCombined, sizeof(aCombined));
    items.Next();
  }
  return aHash;
}

//=======================================================================
// function : ShallowDump
// purpose  :
//=======================================================================
inline void ShallowDump(const TopLoc_Location& me, Standard_OStream& S)
{
  me.ShallowDump(S);
}

namespace std
{
template <>
struct hash<TopLoc_Location>
{
  size_t operator()(const TopLoc_Location& theLocation) const { return theLocation.HashCode(); }
};
} // namespace std
