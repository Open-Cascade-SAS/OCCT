// Created on: 1992-06-24
// Created by: Gilles DEBARBOUILLE
// Copyright (c) 1992-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <stdio.h>
#include <string.h>
#include <Standard_Stream.hxx>
#include <TCollection_HAsciiString.hxx>
#include <TCollection_AsciiString.hxx>

//=======================================================================
// function : Name
// purpose  :
//=======================================================================

inline TCollection_AsciiString Units_Unit::Name() const
{
  return thename->String();
}

//=======================================================================
// function : Value
// purpose  :
//=======================================================================

inline Standard_Real Units_Unit::Value() const
{
  return thevalue;
}

//=======================================================================
// function : Quantity
// purpose  :
//=======================================================================

inline Handle(Units_Quantity) Units_Unit::Quantity() const
{
  return thequantity;
}

//=======================================================================
// function : SymbolsSequence
// purpose  :
//=======================================================================

inline Handle(TColStd_HSequenceOfHAsciiString) Units_Unit::SymbolsSequence() const
{
  return thesymbolssequence;
}

//=======================================================================
// function : Value
// purpose  :
//=======================================================================

inline void Units_Unit::Value(const Standard_Real avalue)
{
  thevalue = avalue;
}

//=======================================================================
// function : Quantity
// purpose  :
//=======================================================================

inline void Units_Unit::Quantity(const Handle(Units_Quantity)& aquantity)
{
  thequantity = aquantity;
}
