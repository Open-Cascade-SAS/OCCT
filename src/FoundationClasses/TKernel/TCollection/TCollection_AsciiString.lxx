// Copyright (c) 1998-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <TCollection_AsciiString.hxx>

//! Returns True when the two strings are the same.
//! @param[in] theString1 first string to compare
//! @param[in] theString2 second string to compare
//! @return true if strings are equal
inline Standard_Boolean IsEqual(const TCollection_AsciiString& theString1,
                                const TCollection_AsciiString& theString2)
{
  return TCollection_AsciiString::IsEqual(theString1, theString2);
}

namespace std
{
template <>
struct hash<TCollection_AsciiString>
{
  size_t operator()(const TCollection_AsciiString& theString) const { return theString.HashCode(); }
};
} // namespace std

//=================================================================================================

inline void TCollection_AsciiString::AssignCat(const TCollection_AsciiString& theOther)
{
  AssignCat(theOther.ToCString(), theOther.Length());
}

//=================================================================================================

inline void TCollection_AsciiString::AssignCat(const Standard_CString theCString)
{
  if (theCString)
  {
    AssignCat(theCString, static_cast<Standard_Integer>(strlen(theCString)));
  }
}

//=================================================================================================

#if __cplusplus >= 201703L
inline void TCollection_AsciiString::AssignCat(const std::string_view& theStringView)
{
  if (!theStringView.empty())
  {
    AssignCat(theStringView.data(), static_cast<Standard_Integer>(theStringView.size()));
  }
}
#endif

//=================================================================================================

template <std::size_t N>
inline void TCollection_AsciiString::AssignCat(const char (&theLiteral)[N])
{
  AssignCat(theLiteral, static_cast<Standard_Integer>(strlen(theLiteral)));
}

//=================================================================================================

inline TCollection_AsciiString TCollection_AsciiString::Cat(
  const TCollection_AsciiString& theOther) const
{
  return Cat(theOther.ToCString(), theOther.Length());
}

//=================================================================================================

inline TCollection_AsciiString TCollection_AsciiString::Cat(const Standard_CString theCString) const
{
  return theCString ? Cat(theCString, static_cast<Standard_Integer>(strlen(theCString)))
                    : TCollection_AsciiString(*this);
}

//=================================================================================================

#if __cplusplus >= 201703L
inline TCollection_AsciiString TCollection_AsciiString::Cat(
  const std::string_view& theStringView) const
{
  return Cat(theStringView.data(), static_cast<Standard_Integer>(theStringView.size()));
}
#endif

//=================================================================================================

template <std::size_t N>
inline TCollection_AsciiString TCollection_AsciiString::Cat(const char (&theLiteral)[N]) const
{
  return Cat(theLiteral, static_cast<Standard_Integer>(strlen(theLiteral)));
}

//=================================================================================================

inline void TCollection_AsciiString::Copy(const Standard_CString theCString)
{
  Copy(theCString, theCString ? static_cast<Standard_Integer>(strlen(theCString)) : 0);
}

//=================================================================================================

#if __cplusplus >= 201703L
inline void TCollection_AsciiString::Copy(const std::string_view& theStringView)
{
  Copy(theStringView.data(), static_cast<Standard_Integer>(theStringView.size()));
}
#endif

//=================================================================================================

template <std::size_t N>
inline void TCollection_AsciiString::Copy(const char (&theLiteral)[N])
{
  Copy(theLiteral, static_cast<Standard_Integer>(strlen(theLiteral)));
}

//=================================================================================================

inline void TCollection_AsciiString::Copy(const TCollection_AsciiString& theFromWhere)
{
  if (&theFromWhere != this)
  {
    Copy(theFromWhere.ToCString(), theFromWhere.Length());
  }
}

//=================================================================================================

inline void TCollection_AsciiString::Insert(const Standard_Integer         theWhere,
                                            const TCollection_AsciiString& theWhat)
{
  Insert(theWhere, theWhat.ToCString(), theWhat.Length());
}

//=================================================================================================

inline void TCollection_AsciiString::Insert(const Standard_Integer theWhere,
                                            const Standard_CString theCString)
{
  if (theCString)
  {
    Insert(theWhere, theCString, static_cast<Standard_Integer>(strlen(theCString)));
  }
}

//=================================================================================================

#if __cplusplus >= 201703L
inline void TCollection_AsciiString::Insert(const Standard_Integer  theWhere,
                                            const std::string_view& theStringView)
{
  Insert(theWhere, theStringView.data(), static_cast<Standard_Integer>(theStringView.size()));
}
#endif

//=================================================================================================

template <std::size_t N>
inline void TCollection_AsciiString::Insert(const Standard_Integer theWhere,
                                            const char (&theLiteral)[N])
{
  Insert(theWhere, theLiteral, static_cast<Standard_Integer>(strlen(theLiteral)));
}

//=================================================================================================

inline void TCollection_AsciiString::InsertAfter(const Standard_Integer         theIndex,
                                                 const TCollection_AsciiString& theOther)
{
  InsertAfter(theIndex, theOther.ToCString(), theOther.Length());
}

//=================================================================================================

inline void TCollection_AsciiString::InsertAfter(const Standard_Integer theIndex,
                                                 const Standard_CString theCString)
{
  if (theCString)
    InsertAfter(theIndex, theCString, static_cast<Standard_Integer>(strlen(theCString)));
}

//=================================================================================================

#if __cplusplus >= 201703L
inline void TCollection_AsciiString::InsertAfter(const Standard_Integer  theIndex,
                                                 const std::string_view& theStringView)
{
  InsertAfter(theIndex, theStringView.data(), static_cast<Standard_Integer>(theStringView.size()));
}
#endif

//=================================================================================================

template <std::size_t N>
inline void TCollection_AsciiString::InsertAfter(const Standard_Integer theIndex,
                                                 const char (&theLiteral)[N])
{
  InsertAfter(theIndex, theLiteral, static_cast<Standard_Integer>(strlen(theLiteral)));
}

//=================================================================================================

inline void TCollection_AsciiString::InsertBefore(const Standard_Integer         theIndex,
                                                  const TCollection_AsciiString& theOther)
{
  InsertBefore(theIndex, theOther.ToCString(), theOther.Length());
}

//=================================================================================================

inline void TCollection_AsciiString::InsertBefore(const Standard_Integer theIndex,
                                                  const Standard_CString theCString)
{
  if (theCString)
    InsertBefore(theIndex, theCString, static_cast<Standard_Integer>(strlen(theCString)));
}

//=================================================================================================

#if __cplusplus >= 201703L
inline void TCollection_AsciiString::InsertBefore(const Standard_Integer  theIndex,
                                                  const std::string_view& theStringView)
{
  InsertBefore(theIndex, theStringView.data(), static_cast<Standard_Integer>(theStringView.size()));
}
#endif

//=================================================================================================

template <std::size_t N>
inline void TCollection_AsciiString::InsertBefore(const Standard_Integer theIndex,
                                                  const char (&theLiteral)[N])
{
  InsertBefore(theIndex, theLiteral, static_cast<Standard_Integer>(strlen(theLiteral)));
}

//=================================================================================================

inline Standard_Boolean TCollection_AsciiString::IsEqual(
  const TCollection_AsciiString& theOther) const
{
  return IsEqual(theOther.myString, theOther.myLength);
}

//=================================================================================================

inline Standard_Boolean TCollection_AsciiString::IsEqual(const Standard_CString theCString) const
{
  return theCString ? IsEqual(theCString, static_cast<Standard_Integer>(strlen(theCString)))
                    : (myLength == 0);
}

//=================================================================================================

#if __cplusplus >= 201703L
inline Standard_Boolean TCollection_AsciiString::IsEqual(
  const std::string_view& theStringView) const
{
  return IsEqual(theStringView.data(), static_cast<Standard_Integer>(theStringView.size()));
}
#endif

//=================================================================================================

template <std::size_t N>
inline Standard_Boolean TCollection_AsciiString::IsEqual(const char (&theLiteral)[N]) const
{
  return IsEqual(theLiteral, static_cast<Standard_Integer>(strlen(theLiteral)));
}

//=================================================================================================

inline Standard_Boolean TCollection_AsciiString::IsDifferent(
  const TCollection_AsciiString& theOther) const
{
  return IsDifferent(theOther.myString, theOther.myLength);
}

//=================================================================================================

inline Standard_Boolean TCollection_AsciiString::IsDifferent(
  const Standard_CString theCString) const
{
  return !IsEqual(theCString);
}

//=================================================================================================

#if __cplusplus >= 201703L
inline Standard_Boolean TCollection_AsciiString::IsDifferent(
  const std::string_view& theStringView) const
{
  return !IsEqual(theStringView);
}
#endif

//=================================================================================================

template <std::size_t N>
inline Standard_Boolean TCollection_AsciiString::IsDifferent(const char (&theLiteral)[N]) const
{
  return !IsEqual(theLiteral);
}

//=================================================================================================

inline Standard_Boolean TCollection_AsciiString::IsLess(
  const TCollection_AsciiString& theOther) const
{
  return IsLess(theOther.ToCString(), theOther.Length());
}

//=================================================================================================

inline Standard_Boolean TCollection_AsciiString::IsLess(const Standard_CString theCString) const
{
  return theCString ? IsLess(theCString, static_cast<Standard_Integer>(strlen(theCString)))
                    : Standard_False;
}

//=================================================================================================

#if __cplusplus >= 201703L
inline Standard_Boolean TCollection_AsciiString::IsLess(const std::string_view& theStringView) const
{
  return IsLess(theStringView.data(), static_cast<Standard_Integer>(theStringView.size()));
}
#endif

//=================================================================================================

template <std::size_t N>
inline Standard_Boolean TCollection_AsciiString::IsLess(const char (&theLiteral)[N]) const
{
  return IsLess(theLiteral, static_cast<Standard_Integer>(strlen(theLiteral)));
}

//=================================================================================================

inline Standard_Boolean TCollection_AsciiString::IsGreater(
  const TCollection_AsciiString& theOther) const
{
  return IsGreater(theOther.ToCString(), theOther.Length());
}

//=================================================================================================

inline Standard_Boolean TCollection_AsciiString::IsGreater(const Standard_CString theCString) const
{
  return theCString ? IsGreater(theCString, static_cast<Standard_Integer>(strlen(theCString)))
                    : (myLength > 0);
}

//=================================================================================================

#if __cplusplus >= 201703L
inline Standard_Boolean TCollection_AsciiString::IsGreater(
  const std::string_view& theStringView) const
{
  return IsGreater(theStringView.data(), static_cast<Standard_Integer>(theStringView.size()));
}
#endif

//=================================================================================================

template <std::size_t N>
inline Standard_Boolean TCollection_AsciiString::IsGreater(const char (&theLiteral)[N]) const
{
  return IsGreater(theLiteral, static_cast<Standard_Integer>(strlen(theLiteral)));
}

//=================================================================================================

inline Standard_Boolean TCollection_AsciiString::StartsWith(
  const TCollection_AsciiString& theStartString) const
{
  return StartsWith(theStartString.ToCString(), theStartString.Length());
}

//=================================================================================================

inline Standard_Boolean TCollection_AsciiString::StartsWith(const Standard_CString theCString) const
{
  return theCString ? StartsWith(theCString, static_cast<Standard_Integer>(strlen(theCString)))
                    : (myLength == 0);
}

//=================================================================================================

#if __cplusplus >= 201703L
inline Standard_Boolean TCollection_AsciiString::StartsWith(
  const std::string_view& theStartString) const
{
  return StartsWith(theStartString.data(), static_cast<Standard_Integer>(theStartString.size()));
}
#endif

//=================================================================================================

inline Standard_Boolean TCollection_AsciiString::EndsWith(
  const TCollection_AsciiString& theEndString) const
{
  return EndsWith(theEndString.ToCString(), theEndString.Length());
}

//=================================================================================================

#if __cplusplus >= 201703L
inline Standard_Boolean TCollection_AsciiString::EndsWith(
  const std::string_view& theEndString) const
{
  return EndsWith(theEndString.data(), static_cast<Standard_Integer>(theEndString.size()));
}
#endif

//=================================================================================================

template <std::size_t N>
inline Standard_Boolean TCollection_AsciiString::StartsWith(const char (&theLiteral)[N]) const
{
  return StartsWith(theLiteral, static_cast<Standard_Integer>(strlen(theLiteral)));
}

//=================================================================================================

template <std::size_t N>
inline Standard_Boolean TCollection_AsciiString::EndsWith(const char (&theLiteral)[N]) const
{
  return EndsWith(theLiteral, static_cast<Standard_Integer>(strlen(theLiteral)));
}

//=================================================================================================

inline Standard_Integer TCollection_AsciiString::Search(
  const TCollection_AsciiString& theWhat) const
{
  return Search(theWhat.ToCString(), theWhat.Length());
}

//=================================================================================================

inline Standard_Integer TCollection_AsciiString::Search(const Standard_CString theCString) const
{
  return theCString ? Search(theCString, static_cast<Standard_Integer>(strlen(theCString))) : -1;
}

//=================================================================================================

#if __cplusplus >= 201703L
inline Standard_Integer TCollection_AsciiString::Search(const std::string_view& theWhat) const
{
  return Search(theWhat.data(), static_cast<Standard_Integer>(theWhat.size()));
}
#endif

//=================================================================================================

template <std::size_t N>
inline Standard_Integer TCollection_AsciiString::Search(const char (&theLiteral)[N]) const
{
  return Search(theLiteral, static_cast<Standard_Integer>(strlen(theLiteral)));
}

//=================================================================================================

inline Standard_Integer TCollection_AsciiString::SearchFromEnd(
  const TCollection_AsciiString& theWhat) const
{
  return SearchFromEnd(theWhat.ToCString(), theWhat.Length());
}

//=================================================================================================

inline Standard_Integer TCollection_AsciiString::SearchFromEnd(
  const Standard_CString theCString) const
{
  return theCString ? SearchFromEnd(theCString, static_cast<Standard_Integer>(strlen(theCString)))
                    : -1;
}

//=================================================================================================

#if __cplusplus >= 201703L
inline Standard_Integer TCollection_AsciiString::SearchFromEnd(
  const std::string_view& theWhat) const
{
  return SearchFromEnd(theWhat.data(), static_cast<Standard_Integer>(theWhat.size()));
}
#endif

//=================================================================================================

template <std::size_t N>
inline Standard_Integer TCollection_AsciiString::SearchFromEnd(const char (&theLiteral)[N]) const
{
  return SearchFromEnd(theLiteral, static_cast<Standard_Integer>(strlen(theLiteral)));
}

//=================================================================================================

inline void TCollection_AsciiString::SetValue(const Standard_Integer         theWhere,
                                              const TCollection_AsciiString& theWhat)
{
  SetValue(theWhere, theWhat.ToCString(), theWhat.Length());
}

//=================================================================================================

inline void TCollection_AsciiString::SetValue(const Standard_Integer theWhere,
                                              const Standard_CString theCString)
{
  if (theCString)
  {
    SetValue(theWhere, theCString, static_cast<Standard_Integer>(strlen(theCString)));
  }
  else
  {
    SetValue(theWhere, "", 0);
  }
}

//=================================================================================================

#if __cplusplus >= 201703L
inline void TCollection_AsciiString::SetValue(const Standard_Integer  theWhere,
                                              const std::string_view& theStringView)
{
  SetValue(theWhere, theStringView.data(), static_cast<Standard_Integer>(theStringView.size()));
}
#endif

//=================================================================================================

inline size_t TCollection_AsciiString::HashCode() const
{
  if (myLength < 4)
  {
    return opencascade::FNVHash::hash_combine(*myString, myLength);
  }
  return opencascade::hashBytes(myString, myLength);
}

//=================================================================================================

inline Standard_Boolean TCollection_AsciiString::IsEqual(const TCollection_AsciiString& string1,
                                                         const TCollection_AsciiString& string2)
{
  return string1.IsEqual(string2);
}

//=================================================================================================

#if __cplusplus >= 201703L
inline Standard_Boolean TCollection_AsciiString::IsEqual(const TCollection_AsciiString& theString1,
                                                         const std::string_view& theStringView)
{
  return theString1.IsEqual(theStringView);
}
#endif

//=================================================================================================

#if __cplusplus >= 201703L
inline Standard_Boolean TCollection_AsciiString::IsEqual(const std::string_view& theStringView,
                                                         const TCollection_AsciiString& theString2)
{
  return theString2.IsEqual(theStringView);
}
#endif

//=================================================================================================

inline Standard_Boolean TCollection_AsciiString::IsSameString(
  const TCollection_AsciiString& theString1,
  const TCollection_AsciiString& theString2,
  const Standard_Boolean         theIsCaseSensitive)
{
  return IsSameString(theString1.ToCString(),
                      theString1.Length(),
                      theString2.ToCString(),
                      theString2.Length(),
                      theIsCaseSensitive);
}

//=================================================================================================

inline Standard_Boolean TCollection_AsciiString::IsSameString(
  const TCollection_AsciiString& theString1,
  const Standard_CString         theCString,
  const Standard_Boolean         theIsCaseSensitive)
{
  if (!theCString)
    return theString1.Length() == 0;

  return IsSameString(theString1.ToCString(),
                      theString1.Length(),
                      theCString,
                      static_cast<Standard_Integer>(strlen(theCString)),
                      theIsCaseSensitive);
}

//=================================================================================================

inline Standard_Boolean TCollection_AsciiString::IsSameString(
  const Standard_CString         theCString,
  const TCollection_AsciiString& theString2,
  const Standard_Boolean         theIsCaseSensitive)
{
  return IsSameString(theString2, theCString, theIsCaseSensitive);
}

//=================================================================================================

#if __cplusplus >= 201703L
inline Standard_Boolean TCollection_AsciiString::IsSameString(
  const TCollection_AsciiString& theString1,
  const std::string_view&        theStringView,
  const Standard_Boolean         theIsCaseSensitive)
{
  return IsSameString(theString1.ToCString(),
                      theString1.Length(),
                      theStringView.data(),
                      static_cast<Standard_Integer>(theStringView.size()),
                      theIsCaseSensitive);
}
#endif

//=================================================================================================

#if __cplusplus >= 201703L
inline Standard_Boolean TCollection_AsciiString::IsSameString(
  const std::string_view&        theStringView,
  const TCollection_AsciiString& theString2,
  const Standard_Boolean         theIsCaseSensitive)
{
  // Redirect to the primary static method with swapped arguments
  return IsSameString(theString2, theStringView, theIsCaseSensitive);
}
#endif

//=================================================================================================

inline Standard_Boolean TCollection_AsciiString::IsSameString(
  const Standard_CString theCString1,
  const Standard_CString theCString2,
  const Standard_Boolean theIsCaseSensitive)
{
  if (!theCString1 && !theCString2)
    return Standard_True;
  if (!theCString1 || !theCString2)
    return Standard_False;

  return IsSameString(theCString1,
                      static_cast<Standard_Integer>(strlen(theCString1)),
                      theCString2,
                      static_cast<Standard_Integer>(strlen(theCString2)),
                      theIsCaseSensitive);
}

//=================================================================================================

#if __cplusplus >= 201703L
inline Standard_Boolean TCollection_AsciiString::IsSameString(
  const std::string_view& theStringView1,
  const std::string_view& theStringView2,
  const Standard_Boolean  theIsCaseSensitive)
{
  return IsSameString(theStringView1.data(),
                      static_cast<Standard_Integer>(theStringView1.size()),
                      theStringView2.data(),
                      static_cast<Standard_Integer>(theStringView2.size()),
                      theIsCaseSensitive);
}
#endif

//=================================================================================================

template <std::size_t N>
inline void TCollection_AsciiString::operator+=(const char (&theLiteral)[N])
{
  AssignCat(theLiteral);
}

//=================================================================================================

template <std::size_t N>
inline TCollection_AsciiString TCollection_AsciiString::operator+(const char (&theLiteral)[N]) const
{
  return Cat(theLiteral);
}

//=================================================================================================

template <std::size_t N>
inline void TCollection_AsciiString::operator=(const char (&theLiteral)[N])
{
  Copy(theLiteral);
}

//=================================================================================================

template <std::size_t N>
inline Standard_Boolean TCollection_AsciiString::operator==(const char (&theLiteral)[N]) const
{
  return IsEqual(theLiteral);
}

//=================================================================================================

template <std::size_t N>
inline Standard_Boolean TCollection_AsciiString::operator!=(const char (&theLiteral)[N]) const
{
  return IsDifferent(theLiteral);
}

//=================================================================================================

template <std::size_t N>
inline Standard_Boolean TCollection_AsciiString::operator<(const char (&theLiteral)[N]) const
{
  return IsLess(theLiteral);
}

//=================================================================================================

template <std::size_t N>
inline Standard_Boolean TCollection_AsciiString::operator>(const char (&theLiteral)[N]) const
{
  return IsGreater(theLiteral);
}

//=================================================================================================

inline TCollection_AsciiString TCollection_AsciiString::operator+(
  const Standard_Character theOther) const
{
  return Cat(theOther);
}

//=================================================================================================

inline Standard_Integer TCollection_AsciiString::FirstLocationInSet(
  const TCollection_AsciiString& theSet,
  const Standard_Integer         theFromIndex,
  const Standard_Integer         theToIndex) const
{
  return FirstLocationInSet(theSet.ToCString(), theSet.Length(), theFromIndex, theToIndex);
}

//=================================================================================================

#if __cplusplus >= 201703L
inline Standard_Integer TCollection_AsciiString::FirstLocationInSet(
  const std::string_view& theSet,
  const Standard_Integer  theFromIndex,
  const Standard_Integer  theToIndex) const
{
  return FirstLocationInSet(theSet.data(),
                            static_cast<Standard_Integer>(theSet.size()),
                            theFromIndex,
                            theToIndex);
}
#endif

//=================================================================================================

template <std::size_t N>
inline Standard_Integer TCollection_AsciiString::FirstLocationInSet(
  const char (&theLiteral)[N],
  const Standard_Integer theFromIndex,
  const Standard_Integer theToIndex) const
{
  return FirstLocationInSet(theLiteral,
                            static_cast<Standard_Integer>(N - 1),
                            theFromIndex,
                            theToIndex);
}

//=================================================================================================

inline Standard_Integer TCollection_AsciiString::FirstLocationNotInSet(
  const TCollection_AsciiString& theSet,
  const Standard_Integer         theFromIndex,
  const Standard_Integer         theToIndex) const
{
  return FirstLocationNotInSet(theSet.ToCString(), theSet.Length(), theFromIndex, theToIndex);
}

//=================================================================================================

#if __cplusplus >= 201703L
inline Standard_Integer TCollection_AsciiString::FirstLocationNotInSet(
  const std::string_view& theSet,
  const Standard_Integer  theFromIndex,
  const Standard_Integer  theToIndex) const
{
  return FirstLocationNotInSet(theSet.data(),
                               static_cast<Standard_Integer>(theSet.size()),
                               theFromIndex,
                               theToIndex);
}
#endif

//=================================================================================================

template <std::size_t N>
inline Standard_Integer TCollection_AsciiString::FirstLocationNotInSet(
  const char (&theLiteral)[N],
  const Standard_Integer theFromIndex,
  const Standard_Integer theToIndex) const
{
  return FirstLocationNotInSet(theLiteral,
                               static_cast<Standard_Integer>(N - 1),
                               theFromIndex,
                               theToIndex);
}

//=================================================================================================

inline Standard_Boolean TCollection_AsciiString::IsDifferent(const Standard_CString theString,
                                                             const Standard_Integer theLength) const
{
  return !IsEqual(theString, theLength);
}

//=================================================================================================

inline TCollection_AsciiString TCollection_AsciiString::operator+(
  const TCollection_AsciiString& theOther) const
{
  return Cat(theOther);
}

//=================================================================================================

inline TCollection_AsciiString TCollection_AsciiString::operator+(
  const Standard_CString theCString) const
{
  return Cat(theCString);
}

//=================================================================================================

#if __cplusplus >= 201703L
inline TCollection_AsciiString TCollection_AsciiString::operator+(
  const std::string_view& theStringView) const
{
  return Cat(theStringView);
}
#endif

//=================================================================================================

inline TCollection_AsciiString& TCollection_AsciiString::operator=(
  const TCollection_AsciiString& theOther)
{
  Copy(theOther);
  return *this;
}

//=================================================================================================

inline TCollection_AsciiString& TCollection_AsciiString::operator=(
  TCollection_AsciiString&& theOther) noexcept
{
  Move(std::forward<TCollection_AsciiString>(theOther));
  return *this;
}

//=================================================================================================

inline Standard_Boolean TCollection_AsciiString::operator==(
  const TCollection_AsciiString& theOther) const
{
  return IsEqual(theOther);
}

//=================================================================================================

inline Standard_Boolean TCollection_AsciiString::operator==(const Standard_CString theCString) const
{
  return IsEqual(theCString);
}

//=================================================================================================

#if __cplusplus >= 201703L
inline Standard_Boolean TCollection_AsciiString::operator==(
  const std::string_view& theStringView) const
{
  return IsEqual(theStringView);
}
#endif

//=================================================================================================

inline Standard_Boolean TCollection_AsciiString::operator!=(
  const TCollection_AsciiString& theOther) const
{
  return IsDifferent(theOther);
}

//=================================================================================================

inline Standard_Boolean TCollection_AsciiString::operator!=(const Standard_CString theCString) const
{
  return IsDifferent(theCString);
}

//=================================================================================================

#if __cplusplus >= 201703L
inline Standard_Boolean TCollection_AsciiString::operator!=(
  const std::string_view& theStringView) const
{
  return IsDifferent(theStringView);
}
#endif

//=================================================================================================

inline Standard_Boolean TCollection_AsciiString::operator<(
  const TCollection_AsciiString& theOther) const
{
  return IsLess(theOther);
}

//=================================================================================================

#if __cplusplus >= 201703L
inline Standard_Boolean TCollection_AsciiString::operator<(
  const std::string_view& theStringView) const
{
  return IsLess(theStringView);
}
#endif

//=================================================================================================

inline Standard_Boolean TCollection_AsciiString::operator>(
  const TCollection_AsciiString& theOther) const
{
  return IsGreater(theOther);
}

//=================================================================================================

inline Standard_Boolean TCollection_AsciiString::operator>(const Standard_CString theCString) const
{
  return IsGreater(theCString);
}

//=================================================================================================

#if __cplusplus >= 201703L
inline Standard_Boolean TCollection_AsciiString::operator>(
  const std::string_view& theStringView) const
{
  return IsGreater(theStringView);
}
#endif

//=================================================================================================

#if __cplusplus >= 201703L
inline TCollection_AsciiString::TCollection_AsciiString(const std::string_view& theStringView)
    : TCollection_AsciiString(theStringView.data(),
                              static_cast<Standard_Integer>(theStringView.size()))
{
}
#endif

//=================================================================================================

inline TCollection_AsciiString::TCollection_AsciiString(const Standard_CString theMessage)
    : TCollection_AsciiString(theMessage,
                              theMessage ? static_cast<Standard_Integer>(strlen(theMessage)) : 0)
{
}

//=================================================================================================

template <std::size_t N>
inline TCollection_AsciiString::TCollection_AsciiString(const char (&theLiteral)[N])
    : TCollection_AsciiString(theLiteral, static_cast<Standard_Integer>(strlen(theLiteral)))
{
}
