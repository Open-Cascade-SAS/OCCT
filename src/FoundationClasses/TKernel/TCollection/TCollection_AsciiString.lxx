// Copyright (c) 1998-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <Standard_OutOfRange.hxx>
#include <Standard_CString.hxx>
#include <Standard_HashUtils.hxx>
#include <TCollection_AsciiString.hxx>

// definition global methods for using in NCollection

namespace std
{
template <>
struct hash<TCollection_AsciiString>
{
  size_t operator()(const TCollection_AsciiString& theString) const { return theString.HashCode(); }
};
} // namespace std

//=================================================================================================

inline Standard_Boolean IsEqual(const TCollection_AsciiString& theString1,
                                const TCollection_AsciiString& theString2)
{
  return TCollection_AsciiString::IsEqual(theString1, theString2);
}

//=================================================================================================

inline Standard_CString TCollection_AsciiString::ToCString() const
{
  return myString;
}

//=================================================================================================

inline Standard_Integer TCollection_AsciiString::Length() const
{
  return myLength;
}

//=================================================================================================

inline TCollection_AsciiString TCollection_AsciiString::Cat(
  const TCollection_AsciiString& theOther) const
{
  return TCollection_AsciiString(*this, theOther);
}

//=================================================================================================

inline TCollection_AsciiString TCollection_AsciiString::Cat(const Standard_Character theOther) const
{
  return TCollection_AsciiString(*this, theOther);
}

//=================================================================================================

inline TCollection_AsciiString TCollection_AsciiString::Cat(const Standard_Integer theOther) const
{

  return TCollection_AsciiString(*this, TCollection_AsciiString(theOther));
}

//=================================================================================================

inline TCollection_AsciiString TCollection_AsciiString::Cat(const Standard_Real theOther) const
{

  return TCollection_AsciiString(*this, TCollection_AsciiString(theOther));
}

//=================================================================================================

inline size_t TCollection_AsciiString::HashCode() const
{
  if (myLength < 4)
  {
    return opencascade::FNVHash::hash_combine(*myString, myLength);
  }
  return opencascade::hashBytes(myString, myLength);
}

//=================================================================================================

inline Standard_Boolean TCollection_AsciiString::IsEqual(const TCollection_AsciiString& theString1,
                                                         const TCollection_AsciiString& theString2)
{
  return theString1.IsEqual(theString2);
}

//=================================================================================================

inline Standard_Boolean TCollection_AsciiString::IsEqual(const TCollection_AsciiString& theString1,
                                                         const std::string_view& theStringView)
{
  return theString1.IsEqual(theStringView);
}

//=================================================================================================

inline Standard_Boolean TCollection_AsciiString::IsEqual(const std::string_view& theStringView,
                                                         const TCollection_AsciiString& theString2)
{
  return theString2.IsEqual(theStringView);
}

//=================================================================================================

inline TCollection_AsciiString TCollection_AsciiString::SubString(
  const Standard_Integer theFromIndex,
  const Standard_Integer theToIndex) const
{
  // note the we are doing here weird casts just to suppress annoying and meaningless warning
  // -Wstrict-overflow
  Standard_OutOfRange_Always_Raise_if(theFromIndex <= 0 || theToIndex <= 0
                                        || (unsigned int)theToIndex > (unsigned int)myLength
                                        || (unsigned int)theFromIndex > (unsigned int)theToIndex,
                                      "TCollection_AsciiString::SubString() out of range");
  return TCollection_AsciiString(&myString[theFromIndex - 1], theToIndex - theFromIndex + 1);
}
