// Created on: 1993-01-11
// Created by: Christophe MARION
// Copyright (c) 1993-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <HLRAlgo_EdgeStatus.hxx>

//=======================================================================
// function : MoreHidden
// purpose  :
//=======================================================================

inline Standard_Boolean HLRAlgo_EdgeIterator::MoreHidden() const
{
  return iHid <= myNbHid + 1;
}

//=======================================================================
// function : Hidden
// purpose  :
//=======================================================================

inline void HLRAlgo_EdgeIterator::Hidden(Standard_Real&      Start,
                                         Standard_ShortReal& TolStart,
                                         Standard_Real&      End,
                                         Standard_ShortReal& TolEnd) const
{
  Start    = myHidStart;
  TolStart = myHidTolStart;
  End      = myHidEnd;
  TolEnd   = myHidTolEnd;
}

//=======================================================================
// function : InitVisible
// purpose  :
//=======================================================================

inline void HLRAlgo_EdgeIterator::InitVisible(HLRAlgo_EdgeStatus& status)
{
  EVis    = &status;
  iVis    = 1;
  myNbVis = ((HLRAlgo_EdgeStatus*)EVis)->NbVisiblePart();
}

//=======================================================================
// function : MoreVisible
// purpose  :
//=======================================================================

inline Standard_Boolean HLRAlgo_EdgeIterator::MoreVisible() const
{
  return iVis <= myNbVis;
}

//=======================================================================
// function : NextVisible
// purpose  :
//=======================================================================

inline void HLRAlgo_EdgeIterator::NextVisible()
{
  iVis++;
}

//=======================================================================
// function : Visible
// purpose  :
//=======================================================================

inline void HLRAlgo_EdgeIterator::Visible(Standard_Real&      Start,
                                          Standard_ShortReal& TolStart,
                                          Standard_Real&      End,
                                          Standard_ShortReal& TolEnd)
{
  ((HLRAlgo_EdgeStatus*)EVis)->VisiblePart(iVis, Start, TolStart, End, TolEnd);
}
