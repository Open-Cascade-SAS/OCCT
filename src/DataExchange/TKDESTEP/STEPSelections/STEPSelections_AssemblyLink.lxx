// Created on: 1999-03-24
// Created by: data exchange team
// Copyright (c) 1999-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

//=======================================================================
// function : GetNAUO
// purpose  :
//=======================================================================

inline Handle(StepRepr_NextAssemblyUsageOccurrence) STEPSelections_AssemblyLink::GetNAUO() const
{
  return myNAUO;
}

//=======================================================================
// function : GetSDSR
// purpose  :
//=======================================================================

inline Handle(Standard_Transient) STEPSelections_AssemblyLink::GetItem() const
{
  return myItem;
}

//=======================================================================
// function : GetComponent
// purpose  :
//=======================================================================

inline Handle(STEPSelections_AssemblyComponent) STEPSelections_AssemblyLink::GetComponent() const
{
  return myComponent;
}

//=======================================================================
// function : SetNAUO
// purpose  :
//=======================================================================

inline void STEPSelections_AssemblyLink::SetNAUO(
  const Handle(StepRepr_NextAssemblyUsageOccurrence)& nauo)
{
  myNAUO = nauo;
}

//=======================================================================
// function : SetCDSR
// purpose  :
//=======================================================================

inline void STEPSelections_AssemblyLink::SetItem(const Handle(Standard_Transient)& item)
{
  myItem = item;
}

//=======================================================================
// function : SetComponent
// purpose  :
//=======================================================================

inline void STEPSelections_AssemblyLink::SetComponent(
  const Handle(STEPSelections_AssemblyComponent)& part)
{
  myComponent = part;
}
