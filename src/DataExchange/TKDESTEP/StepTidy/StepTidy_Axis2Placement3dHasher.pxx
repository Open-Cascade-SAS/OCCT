// Copyright (c) 2025 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#ifndef _StepTidy_Axis2Placement3dHasher_HeaderFile
#define _StepTidy_Axis2Placement3dHasher_HeaderFile

#include <StepTidy_CartesianPointHasher.pxx>
#include <StepTidy_DirectionHasher.pxx>

#include <Standard_HashUtils.hxx>
#include <StepGeom_Axis2Placement3d.hxx>

//! OCCT-style hasher for StepGeom_Axis2Placement3d entities.
struct StepTidy_Axis2Placement3dHasher
{
  // Hashes the axis placements.
  std::size_t operator()(const Handle(StepGeom_Axis2Placement3d)& thePlacement) const noexcept
  {
    // Prepare an array of hashes for the location, axis, and ref direction.
    // Optimal seed is used for the axis and ref direction if they are not present.
    const size_t aHashes[3]{
      StepTidy_CartesianPointHasher{}(thePlacement->Location()),
      thePlacement->HasAxis() ? StepTidy_DirectionHasher{}(thePlacement->Axis())
                              : opencascade::MurmurHash::optimalSeed(),
      thePlacement->HasRefDirection() ? StepTidy_DirectionHasher{}(thePlacement->RefDirection())
                                      : opencascade::MurmurHash::optimalSeed()};
    const size_t aHash = opencascade::hashBytes(aHashes, sizeof(aHashes));
    if (thePlacement->Name().IsNull())
    {
      // If the name is not present, return the hash.
      return aHash;
    }
    // Add the name to the hash if it is present.
    const size_t aHashWithName[2]{
      aHash,
      std::hash<TCollection_AsciiString>{}(thePlacement->Name()->String())};
    return opencascade::hashBytes(aHashWithName, sizeof(aHashWithName));
  }

  // Compares two axis placements.
  bool operator()(const Handle(StepGeom_Axis2Placement3d)& thePlacement1,
                  const Handle(StepGeom_Axis2Placement3d)& thePlacement2) const noexcept
  {
    // Compare names.
    if (thePlacement1->Name().IsNull() != thePlacement2->Name().IsNull())
    {
      return false;
    }
    if (!thePlacement1->Name()->IsSameString(thePlacement2->Name()))
    {
      return false;
    }

    // Compare location, axis, and ref direction.
    const bool isSameLocation =
      StepTidy_CartesianPointHasher{}(thePlacement1->Location(), thePlacement2->Location());
    // Have to check if the axis is present and compare it.
    const bool isSameAxisFlag = thePlacement1->HasAxis() == thePlacement2->HasAxis();
    const bool isSameAxis =
      isSameAxisFlag
      && (!thePlacement1->HasAxis()
          || StepTidy_DirectionHasher{}(thePlacement1->Axis(), thePlacement2->Axis()));
    // Have to check if the ref direction is present and compare it.
    const bool isSameRefDirectionFlag =
      thePlacement1->HasRefDirection() == thePlacement2->HasRefDirection();
    const bool isSameRefDirection =
      isSameRefDirectionFlag
      && (!thePlacement1->HasRefDirection()
          || StepTidy_DirectionHasher{}(thePlacement1->RefDirection(),
                                        thePlacement2->RefDirection()));

    return isSameLocation && isSameAxis && isSameRefDirection;
  }
};

#endif // _StepTidy_Axis2Placement3dHasher_HeaderFile
