// Created on: 2000-01-31
// Created by: data exchange team
// Copyright (c) 2000-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <Transfer_TransientProcess.hxx>
#include <IGESData_IGESEntity.hxx>

//=======================================================================
// function : SetEpsilon
// purpose  :
//=======================================================================

inline void IGESToBRep_CurveAndSurface::SetEpsilon(const Standard_Real eps)
{
  myEps = eps;
}

//=======================================================================
// function : GetEpsilon
// purpose  :
//=======================================================================

inline Standard_Real IGESToBRep_CurveAndSurface::GetEpsilon() const
{
  return myEps;
}

//=======================================================================
// function : SetEpsCoeff
// purpose  :
//=======================================================================

inline void IGESToBRep_CurveAndSurface::SetEpsCoeff(const Standard_Real eps)
{
  myEpsCoeff = eps;
}

//=======================================================================
// function : GetEpsCoeff
// purpose  :
//=======================================================================

inline Standard_Real IGESToBRep_CurveAndSurface::GetEpsCoeff() const
{
  return myEpsCoeff;
}

//=======================================================================
// function : GetEpsGeom
// purpose  :
//=======================================================================

inline Standard_Real IGESToBRep_CurveAndSurface::GetEpsGeom() const
{
  return myEpsGeom;
}

//=======================================================================
// function : SetMinTol
// purpose  :
//=======================================================================

inline void IGESToBRep_CurveAndSurface::SetMinTol(const Standard_Real mintol)
{
  myMinTol = mintol;
}

//=======================================================================
// function : SetMaxTol
// purpose  :
//=======================================================================

inline void IGESToBRep_CurveAndSurface::SetMaxTol(const Standard_Real maxtol)
{
  myMaxTol = maxtol;
}

//=======================================================================
// function : GetMinTol
// purpose  :
//=======================================================================

inline Standard_Real IGESToBRep_CurveAndSurface::GetMinTol() const
{
  return myMinTol;
}

//=======================================================================
// function : GetMaxTol
// purpose  :
//=======================================================================

inline Standard_Real IGESToBRep_CurveAndSurface::GetMaxTol() const
{
  return myMaxTol;
}

//=======================================================================
// function : SetModeApprox
// purpose  :
//=======================================================================

inline void IGESToBRep_CurveAndSurface::SetModeApprox(const Standard_Boolean mode)
{
  myModeApprox = mode;
}

//=======================================================================
// function : GetModeApprox
// purpose  :
//=======================================================================

inline Standard_Boolean IGESToBRep_CurveAndSurface::GetModeApprox() const
{
  return myModeApprox;
}

//=======================================================================
// function : SetModeTransfer
// purpose  :
//=======================================================================

inline void IGESToBRep_CurveAndSurface::SetModeTransfer(const Standard_Boolean mode)
{
  myModeIsTopo = mode;
}

//=======================================================================
// function : GetModeTransfer
// purpose  :
//=======================================================================

inline Standard_Boolean IGESToBRep_CurveAndSurface::GetModeTransfer() const
{
  return myModeIsTopo;
}

//=======================================================================
// function : SetOptimized
// purpose  :
//=======================================================================

inline void IGESToBRep_CurveAndSurface::SetOptimized(const Standard_Boolean optimized)
{
  myContIsOpti = optimized;
}

//=======================================================================
// function : GetOptimized
// purpose  :
//=======================================================================

inline Standard_Boolean IGESToBRep_CurveAndSurface::GetOptimized() const
{
  return myContIsOpti;
}

//=======================================================================
// function : GetUnitFactor
// purpose  :
//=======================================================================

inline Standard_Real IGESToBRep_CurveAndSurface::GetUnitFactor() const
{
  return myUnitFactor;
}

//=======================================================================
// function : SetSurfaceCurve
// purpose  :
//=======================================================================

inline void IGESToBRep_CurveAndSurface::SetSurfaceCurve(const Standard_Integer ival)
{
  mySurfaceCurve = ival;
}

//=======================================================================
// function : GetSurfaceCurve
// purpose  :
//=======================================================================

inline Standard_Integer IGESToBRep_CurveAndSurface::GetSurfaceCurve() const
{
  return mySurfaceCurve;
}

//=======================================================================
// function : GetModel
// purpose  :
//=======================================================================

inline Handle(IGESData_IGESModel) IGESToBRep_CurveAndSurface::GetModel() const
{
  return myModel;
}

//=======================================================================
// function : SetContinuity
// purpose  :
//=======================================================================

inline void IGESToBRep_CurveAndSurface::SetContinuity(const Standard_Integer continuity)
{
  myContinuity = continuity;
}

//=======================================================================
// function : GetContinuity
// purpose  :
//=======================================================================

inline Standard_Integer IGESToBRep_CurveAndSurface::GetContinuity() const
{
  return myContinuity;
}

//=======================================================================
// function : SetTransferProcess
// purpose  :
//=======================================================================

inline void IGESToBRep_CurveAndSurface::SetTransferProcess(
  const Handle(Transfer_TransientProcess)& TP)
{
  myTP = TP;
}

//=======================================================================
// function : GetTransferProcess
// purpose  :
//=======================================================================

inline Handle(Transfer_TransientProcess) IGESToBRep_CurveAndSurface::GetTransferProcess() const
{
  return myTP;
}

//=======================================================================
// function : SendFail
// purpose  :
//=======================================================================

inline void IGESToBRep_CurveAndSurface::SendFail(const Handle(IGESData_IGESEntity)& start,
                                                 const Message_Msg&                 amsg)
{
  GetTransferProcess()->SendFail(start, amsg);
}

//=======================================================================
// function : SendWarning
// purpose  :
//=======================================================================

inline void IGESToBRep_CurveAndSurface::SendWarning(const Handle(IGESData_IGESEntity)& start,
                                                    const Message_Msg&                 amsg)
{
  GetTransferProcess()->SendWarning(start, amsg);
}

//=======================================================================
// function : SendMsg
// purpose  :
//=======================================================================

inline void IGESToBRep_CurveAndSurface::SendMsg(const Handle(IGESData_IGESEntity)& start,
                                                const Message_Msg&                 amsg)
{
  GetTransferProcess()->SendMsg(start, amsg);
}
