// Created on: 1996-06-03
// Created by: Laurent BUCHARD
// Copyright (c) 1996-1999 Matra Datavision
// Copyright (c) 1999-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

//  Modified by skv - Wed Sep  3 15:33:17 2003 OCC578

#include <IntCurveSurface_IntersectionPoint.hxx>
#include <TopAbs_State.hxx>

//============================================================================
inline Standard_Boolean IntCurvesFace_Intersector::IsDone() const
{
  return (done);
}

//============================================================================
inline Standard_Integer IntCurvesFace_Intersector::NbPnt() const
{
  return (nbpnt);
}

//============================================================================
inline const gp_Pnt& IntCurvesFace_Intersector::Pnt(const Standard_Integer i) const
{
  return (SeqPnt.Value(i).Pnt());
}

//============================================================================
inline Standard_Real IntCurvesFace_Intersector::UParameter(const Standard_Integer i) const
{
  return (SeqPnt.Value(i).U());
}

//============================================================================
inline Standard_Real IntCurvesFace_Intersector::VParameter(const Standard_Integer i) const
{
  return (SeqPnt.Value(i).V());
}

//============================================================================
inline Standard_Real IntCurvesFace_Intersector::WParameter(const Standard_Integer i) const
{
  return (SeqPnt.Value(i).W());
}

//============================================================================
inline IntCurveSurface_TransitionOnCurve IntCurvesFace_Intersector::Transition(
  const Standard_Integer i) const
{
  return (SeqPnt.Value(i).Transition());
}

//============================================================================
//  Modified by skv - Wed Sep  3 15:34:18 2003 OCC578 Begin
//  //inline TopAbs_State IntCurvesFace_Intersector::State(const Standard_Integer i) const {
// inline TopAbs_State IntCurvesFace_Intersector::State(const Standard_Integer ) const {
//   return(TopAbs_IN);
// }
inline TopAbs_State IntCurvesFace_Intersector::State(const Standard_Integer i) const
{
  return (mySeqState.Value(i) == 0) ? TopAbs_IN : TopAbs_ON;
}

//  Modified by skv - Wed Sep  3 15:34:20 2003 OCC578 End
//============================================================================
inline Standard_Boolean IntCurvesFace_Intersector::IsParallel() const
{
  return myIsParallel;
}

inline const TopoDS_Face& IntCurvesFace_Intersector::Face() const
{
  return (face);
}

//============================================================================
