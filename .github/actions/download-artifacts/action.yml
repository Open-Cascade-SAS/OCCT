name: 'Download Platform Artifacts'
description: 'Download and extract artifacts with proper file permissions and symlinks (cross-platform)'
inputs:
  name:
    description: 'Artifact name'
    required: true
  path:
    description: 'Path to extract to (optional)'
    required: false
    default: '.'

runs:
  using: 'composite'
  steps:
    - name: Download archive
      uses: actions/download-artifact@v4.3.0
      with:
        name: ${{ inputs.name }}
        path: ./download-temp
    
    - name: Extract archive (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        $EXTRACT_PATH = "${{ inputs.path }}"
        $ARCHIVE_FILE = "./download-temp/${{ inputs.name }}.zip"
        
        if (-not (Test-Path $ARCHIVE_FILE)) {
          Write-Error "Archive file $ARCHIVE_FILE not found"
          Get-ChildItem ./download-temp/
          exit 1
        }
        
        Write-Output "Extracting $ARCHIVE_FILE to $EXTRACT_PATH"
        
        # Extract and handle directory structure properly
        if ($EXTRACT_PATH -ne ".") {
          # Extract to temp location first
          New-Item -ItemType Directory -Path "temp-extract" -Force | Out-Null
          Expand-Archive -Path $ARCHIVE_FILE -DestinationPath "temp-extract" -Force
          
          # Move the extracted content to the desired path
          if (Test-Path "temp-extract/install") {
            # Remove target directory if it exists to avoid nesting
            if (Test-Path $EXTRACT_PATH) {
              Remove-Item -Recurse -Force $EXTRACT_PATH
            }
            Move-Item "temp-extract/install" $EXTRACT_PATH -Force
          } else {
            # If archive doesn't contain install/, move everything
            New-Item -ItemType Directory -Path $EXTRACT_PATH -Force | Out-Null
            Get-ChildItem "temp-extract" | Move-Item -Destination $EXTRACT_PATH -Force
          }
          
          # Clean up temp directory
          Remove-Item -Recurse -Force "temp-extract"
        } else {
          Expand-Archive -Path $ARCHIVE_FILE -DestinationPath $EXTRACT_PATH -Force
        }
        
        Write-Output "Extraction complete"
        Get-ChildItem $EXTRACT_PATH -ErrorAction SilentlyContinue
        
        # Clean up temporary download directory
        Remove-Item -Recurse -Force ./download-temp
    
    - name: Extract archive (Unix)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        EXTRACT_PATH="${{ inputs.path }}"
        ARCHIVE_FILE="./download-temp/${{ inputs.name }}.tar.gz"
        
        if [ ! -f "$ARCHIVE_FILE" ]; then
          echo "Error: Archive file $ARCHIVE_FILE not found"
          ls -la ./download-temp/
          exit 1
        fi
        
        echo "Extracting $ARCHIVE_FILE to $EXTRACT_PATH"
        
        # Extract and handle directory structure properly
        if [ "$EXTRACT_PATH" != "." ]; then
          # Extract to temp location first
          mkdir -p temp-extract
          tar -xzf "$ARCHIVE_FILE" -C temp-extract
          
          # Move the extracted content to the desired path
          if [ -d "temp-extract/install" ]; then
            # Remove target directory if it exists to avoid nesting
            rm -rf "$EXTRACT_PATH"
            mv "temp-extract/install" "$EXTRACT_PATH"
          else
            # If archive doesn't contain install/, move everything
            mkdir -p "$EXTRACT_PATH"
            mv temp-extract/* "$EXTRACT_PATH/"
          fi
          
          # Clean up temp directory
          rm -rf temp-extract
        else
          tar -xzf "$ARCHIVE_FILE" -C "$EXTRACT_PATH"
        fi
        
        echo "Extraction complete"
        ls -la "$EXTRACT_PATH"
        
        # Clean up temporary download directory
        rm -rf ./download-temp